(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{"./demo/src/api-docs.ts":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var API_DOCS = {\n    "NgbAccordionConfig": {\n        "fileName": "src/accordion/accordion-config.ts",\n        "className": "NgbAccordionConfig",\n        "description": "Configuration service for the NgbAccordion component.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the accordions used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "closeOthers",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "type",\n                "type": "string",\n                "description": ""\n            }\n        ]\n    },\n    "NgbPanelTitle": {\n        "fileName": "src/accordion/accordion.ts",\n        "className": "NgbPanelTitle",\n        "description": "This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.",\n        "type": "Directive",\n        "selector": "ng-template[ngbPanelTitle]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NgbPanelContent": {\n        "fileName": "src/accordion/accordion.ts",\n        "className": "NgbPanelContent",\n        "description": "This directive must be used to wrap accordion panel content.",\n        "type": "Directive",\n        "selector": "ng-template[ngbPanelContent]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NgbPanel": {\n        "fileName": "src/accordion/accordion.ts",\n        "className": "NgbPanel",\n        "description": "The NgbPanel directive represents an individual panel with the title and collapsible\\ncontent",\n        "type": "Directive",\n        "selector": "ngb-panel",\n        "inputs": [\n            {\n                "name": "disabled",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": "A flag determining whether the panel is disabled or not.\\nWhen disabled, the panel cannot be toggled."\n            },\n            {\n                "name": "id",\n                "type": "string",\n                "description": "An optional id for the panel. The id should be unique.\\nIf not provided, it will be auto-generated."\n            },\n            {\n                "name": "title",\n                "type": "string",\n                "description": "The title for the panel."\n            },\n            {\n                "name": "type",\n                "type": "string",\n                "description": "Accordion\'s types of panels to be applied per panel basis.\\nBootstrap 4 recognizes the following types: \\"success\\", \\"info\\", \\"warning\\" and \\"danger\\"."\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "contentTpl",\n                "type": "NgbPanelContent",\n                "description": ""\n            },\n            {\n                "name": "isOpen",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": "A flag telling if the panel is currently open"\n            },\n            {\n                "name": "titleTpl",\n                "type": "NgbPanelTitle",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbPanelChangeEvent": {\n        "fileName": "src/accordion/accordion.ts",\n        "className": "NgbPanelChangeEvent",\n        "description": "The payload of the change event fired right before toggling an accordion panel",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "nextState",\n                "type": "boolean",\n                "description": "Whether the panel will be opened (true) or closed (false)"\n            },\n            {\n                "name": "panelId",\n                "type": "string",\n                "description": "Id of the accordion panel that is toggled"\n            },\n            {\n                "name": "preventDefault",\n                "type": "() => void",\n                "description": "Function that will prevent panel toggling if called"\n            }\n        ]\n    },\n    "NgbAccordion": {\n        "fileName": "src/accordion/accordion.ts",\n        "className": "NgbAccordion",\n        "description": "The NgbAccordion directive is a collection of panels.\\nIt can assure that only one panel can be opened at a time.",\n        "type": "Component",\n        "selector": "ngb-accordion",\n        "exportAs": "ngbAccordion",\n        "inputs": [\n            {\n                "name": "activeIds",\n                "type": "string | string[]",\n                "description": "An array or comma separated strings of panel identifiers that should be opened"\n            },\n            {\n                "name": "closeOthers",\n                "type": "boolean",\n                "description": "Whether the other panels should be closed when a panel is opened"\n            },\n            {\n                "name": "destroyOnHide",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": "Whether the closed panels should be hidden without destroying them"\n            },\n            {\n                "name": "type",\n                "type": "string",\n                "description": "Accordion\'s types of panels to be applied globally.\\nBootstrap 4 recognizes the following types: \\"success\\", \\"info\\", \\"warning\\" and \\"danger\\"."\n            }\n        ],\n        "outputs": [\n            {\n                "name": "panelChange",\n                "description": "A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details"\n            }\n        ],\n        "properties": [\n            {\n                "name": "panels",\n                "type": "QueryList<NgbPanel>",\n                "description": ""\n            }\n        ],\n        "methods": [\n            {\n                "name": "toggle",\n                "description": "Programmatically toggle a panel with a given id.",\n                "args": [\n                    {\n                        "name": "panelId",\n                        "type": "string"\n                    }\n                ],\n                "returnType": "void"\n            }\n        ]\n    },\n    "NgbAlertConfig": {\n        "fileName": "src/alert/alert-config.ts",\n        "className": "NgbAlertConfig",\n        "description": "Configuration service for the NgbAlert component.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the alerts used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "dismissible",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "type",\n                "defaultValue": "warning",\n                "type": "string",\n                "description": ""\n            }\n        ]\n    },\n    "NgbAlert": {\n        "fileName": "src/alert/alert.ts",\n        "className": "NgbAlert",\n        "description": "Alerts can be used to provide feedback messages.",\n        "type": "Component",\n        "selector": "ngb-alert",\n        "inputs": [\n            {\n                "name": "dismissible",\n                "type": "boolean",\n                "description": "A flag indicating if a given alert can be dismissed (closed) by a user. If this flag is set, a close button (in a\\nform of an ×) will be displayed."\n            },\n            {\n                "name": "type",\n                "type": "string",\n                "description": "Alert type (CSS class). Bootstrap 4 recognizes the following types: \\"success\\", \\"info\\", \\"warning\\", \\"danger\\",\\n\\"primary\\", \\"secondary\\", \\"light\\", \\"dark\\"."\n            }\n        ],\n        "outputs": [\n            {\n                "name": "close",\n                "description": "An event emitted when the close button is clicked. This event has no payload. Only relevant for dismissible\\nalerts."\n            }\n        ],\n        "properties": [],\n        "methods": []\n    },\n    "NzButtonGroupComponent": {\n        "fileName": "src/button/nz-button-group.component.ts",\n        "className": "NzButtonGroupComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-button-group",\n        "inputs": [\n            {\n                "name": "nzSize",\n                "type": "NzButtonGroupSize",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_classMap",\n                "type": "{ [x: string]: any; }",\n                "description": ""\n            },\n            {\n                "name": "_groupWrapper",\n                "type": "ElementRef<any>",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-btn-group",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_size",\n                "type": "NzButtonGroupSize",\n                "description": ""\n            },\n            {\n                "name": "_sizeMap",\n                "type": "{ large: string; small: string; }",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzButtonComponent": {\n        "fileName": "src/button/nz-button.component.ts",\n        "className": "NzButtonComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-button]",\n        "inputs": [\n            {\n                "name": "nzGhost",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzLoading",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShape",\n                "type": "\\"circle\\"",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "NzButtonGroupSize",\n                "description": ""\n            },\n            {\n                "name": "nzType",\n                "type": "NzButtonType",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_classList",\n                "type": "string[]",\n                "description": ""\n            },\n            {\n                "name": "_clicked",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_iconElement",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_iconOnly",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_innerIElement",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-btn",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_shape",\n                "type": "\\"circle\\"",\n                "description": ""\n            },\n            {\n                "name": "_size",\n                "type": "NzButtonGroupSize",\n                "description": ""\n            },\n            {\n                "name": "_sizeMap",\n                "type": "{ large: string; small: string; }",\n                "description": ""\n            },\n            {\n                "name": "_type",\n                "type": "NzButtonType",\n                "description": ""\n            },\n            {\n                "name": "nativeElement",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "nzGhost",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzLoading",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "NzButtonGroupSize",\n                "description": ""\n            }\n        ],\n        "methods": [\n            {\n                "name": "_onClick",\n                "description": "toggle button clicked animation ",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "_setClassMap",\n                "description": "temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289 ",\n                "args": [],\n                "returnType": "void"\n            }\n        ]\n    },\n    "NgbCheckBox": {\n        "fileName": "src/buttons/checkbox.ts",\n        "className": "NgbCheckBox",\n        "description": "Easily create Bootstrap-style checkbox buttons. A value of a checked button is bound to a variable\\nspecified via ngModel.",\n        "type": "Directive",\n        "selector": "[ngbButton][type=checkbox]",\n        "inputs": [\n            {\n                "name": "disabled",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": "A flag indicating if a given checkbox button is disabled."\n            },\n            {\n                "name": "valueChecked",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": "Value to be propagated as model when the checkbox is checked."\n            },\n            {\n                "name": "valueUnChecked",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": "Value to be propagated as model when the checkbox is unchecked."\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "checked",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "(_: any) => void",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "() => void",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbButtonLabel": {\n        "fileName": "src/buttons/label.ts",\n        "className": "NgbButtonLabel",\n        "description": "",\n        "type": "Directive",\n        "selector": "[ngbButtonLabel]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "active",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "disabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "focused",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbRadioGroup": {\n        "fileName": "src/buttons/radio.ts",\n        "className": "NgbRadioGroup",\n        "description": "Easily create Bootstrap-style radio buttons. A value of a selected button is bound to a variable\\nspecified via ngModel.",\n        "type": "Directive",\n        "selector": "[ngbRadioGroup]",\n        "inputs": [\n            {\n                "name": "name",\n                "type": "string",\n                "description": "The name of the group. Unless enclosed inputs specify a name, this name is used as the name of the\\nenclosed inputs. If not specified, a name is generated automatically."\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "disabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "(_: any) => void",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "() => void",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbRadio": {\n        "fileName": "src/buttons/radio.ts",\n        "className": "NgbRadio",\n        "description": "Marks an input of type \\"radio\\" as part of the NgbRadioGroup.",\n        "type": "Directive",\n        "selector": "[ngbButton][type=radio]",\n        "inputs": [\n            {\n                "name": "disabled",\n                "type": "boolean",\n                "description": "A flag indicating if a given radio button is disabled."\n            },\n            {\n                "name": "name",\n                "type": "string",\n                "description": "The name of the input. All inputs of a group should have the same name. If not specified,\\nthe name of the enclosing group is used."\n            },\n            {\n                "name": "value",\n                "type": "any",\n                "description": "You can specify model value of a given radio by binding to the value property."\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "checked",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "disabled",\n                "type": "boolean",\n                "description": "A flag indicating if a given radio button is disabled."\n            },\n            {\n                "name": "nameAttr",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "value",\n                "type": "any",\n                "description": "You can specify model value of a given radio by binding to the value property."\n            }\n        ],\n        "methods": []\n    },\n    "NgbCarouselConfig": {\n        "fileName": "src/carousel/carousel-config.ts",\n        "className": "NgbCarouselConfig",\n        "description": "Configuration service for the NgbCarousel component.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the carousels used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "interval",\n                "defaultValue": "5000",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "keyboard",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "wrap",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            }\n        ]\n    },\n    "NgbSlide": {\n        "fileName": "src/carousel/carousel.ts",\n        "className": "NgbSlide",\n        "description": "Represents an individual slide to be used within a carousel.",\n        "type": "Directive",\n        "selector": "ng-template[ngbSlide]",\n        "inputs": [\n            {\n                "name": "id",\n                "type": "string",\n                "description": "Unique slide identifier. Must be unique for the entire document for proper accessibility support.\\nWill be auto-generated if not provided."\n            }\n        ],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NgbCarousel": {\n        "fileName": "src/carousel/carousel.ts",\n        "className": "NgbCarousel",\n        "description": "Directive to easily create carousels based on Bootstrap\'s markup.",\n        "type": "Component",\n        "selector": "ngb-carousel",\n        "exportAs": "ngbCarousel",\n        "inputs": [\n            {\n                "name": "activeId",\n                "type": "string",\n                "description": "The active slide id."\n            },\n            {\n                "name": "interval",\n                "type": "number",\n                "description": "Amount of time in milliseconds before next slide is shown."\n            },\n            {\n                "name": "keyboard",\n                "type": "boolean",\n                "description": "A flag for allowing navigation via keyboard"\n            },\n            {\n                "name": "wrap",\n                "type": "boolean",\n                "description": "Whether can wrap from the last to the first slide."\n            }\n        ],\n        "outputs": [\n            {\n                "name": "slide",\n                "description": "A carousel slide event fired when the slide transition is completed.\\nSee NgbSlideEvent for payload details"\n            }\n        ],\n        "properties": [\n            {\n                "name": "slides",\n                "type": "QueryList<NgbSlide>",\n                "description": ""\n            }\n        ],\n        "methods": [\n            {\n                "name": "select",\n                "description": "Navigate to a slide with the specified identifier.",\n                "args": [\n                    {\n                        "name": "slideId",\n                        "type": "string"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "prev",\n                "description": "Navigate to the next slide.",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "next",\n                "description": "Navigate to the next slide.",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "pause",\n                "description": "Stops the carousel from cycling through items.",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "cycle",\n                "description": "Restarts cycling through the carousel slides from left to right.",\n                "args": [],\n                "returnType": "void"\n            }\n        ]\n    },\n    "NgbSlideEvent": {\n        "fileName": "src/carousel/carousel.ts",\n        "className": "NgbSlideEvent",\n        "description": "The payload of the slide event fired when the slide transition is completed",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "current",\n                "type": "string",\n                "description": "New slide ids"\n            },\n            {\n                "name": "direction",\n                "type": "NgbSlideEventDirection",\n                "description": "Slide event direction"\n            },\n            {\n                "name": "prev",\n                "type": "string",\n                "description": "Previous slide id"\n            }\n        ]\n    },\n    "NzCheckboxGroupComponent": {\n        "fileName": "src/checkbox/nz-checkbox-group.component.ts",\n        "className": "NzCheckboxGroupComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-checkbox-group",\n        "inputs": [\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzType",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_options",\n                "type": "any[]",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-checkbox-group",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "any",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzCheckboxComponent": {\n        "fileName": "src/checkbox/nz-checkbox.component.ts",\n        "className": "NzCheckboxComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-checkbox]",\n        "inputs": [\n            {\n                "name": "nzChecked",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzIndeterminate",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_checked",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_classMap",\n                "type": "{ [x: string]: boolean; }",\n                "description": ""\n            },\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_focused",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_innerPrefixCls",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_inputPrefixCls",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-checkbox",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzIndeterminate",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "any",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbCollapse": {\n        "fileName": "src/collapse/collapse.ts",\n        "className": "NgbCollapse",\n        "description": "The NgbCollapse directive provides a simple way to hide and show an element with animations.",\n        "type": "Directive",\n        "selector": "[ngbCollapse]",\n        "exportAs": "ngbCollapse",\n        "inputs": [\n            {\n                "name": "ngbCollapse",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": "A flag indicating collapsed (true) or open (false) state."\n            }\n        ],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzScrollService": {\n        "fileName": "src/core/scroll/nz-scroll.service.ts",\n        "className": "NzScrollService",\n        "description": "",\n        "type": "Service",\n        "methods": [\n            {\n                "name": "setScrollTop",\n                "description": "设置 `el` 滚动条位置 ",\n                "args": [\n                    {\n                        "name": "el",\n                        "type": "Element | Window"\n                    },\n                    {\n                        "name": "topValue",\n                        "type": "number"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "getOffset",\n                "description": "获取 `el` 相对于视窗距离 ",\n                "args": [\n                    {\n                        "name": "el",\n                        "type": "Element"\n                    }\n                ],\n                "returnType": "{ top: number; left: number; }"\n            },\n            {\n                "name": "getScroll",\n                "description": "获取 `el` 滚动条位置 ",\n                "args": [\n                    {\n                        "name": "el",\n                        "type": "Element | Window"\n                    },\n                    {\n                        "name": "top",\n                        "type": "boolean"\n                    }\n                ],\n                "returnType": "number"\n            },\n            {\n                "name": "scrollTo",\n                "description": "使用动画形式将 `el` 滚动至某位置",\n                "args": [\n                    {\n                        "name": "containerEl",\n                        "type": "Element | Window"\n                    },\n                    {\n                        "name": "targetTopValue",\n                        "type": "number"\n                    },\n                    {\n                        "name": "easing",\n                        "type": "EasyingFn"\n                    },\n                    {\n                        "name": "callback",\n                        "type": "() => void"\n                    }\n                ],\n                "returnType": "void"\n            }\n        ],\n        "properties": []\n    },\n    "NgbDatepickerConfig": {\n        "fileName": "src/datepicker/datepicker-config.ts",\n        "className": "NgbDatepickerConfig",\n        "description": "Configuration service for the NgbDatepicker component.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the datepickers used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "dayTemplate",\n                "type": "TemplateRef<DayTemplateContext>",\n                "description": ""\n            },\n            {\n                "name": "displayMonths",\n                "defaultValue": "1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "firstDayOfWeek",\n                "defaultValue": "1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "markDisabled",\n                "type": "(date: NgbDateStruct, current: { year: number; month: number; }) => boolean",\n                "description": ""\n            },\n            {\n                "name": "maxDate",\n                "type": "NgbDateStruct",\n                "description": ""\n            },\n            {\n                "name": "minDate",\n                "type": "NgbDateStruct",\n                "description": ""\n            },\n            {\n                "name": "navigation",\n                "defaultValue": "select",\n                "type": "\\"select\\" | \\"arrows\\" | \\"none\\"",\n                "description": ""\n            },\n            {\n                "name": "outsideDays",\n                "defaultValue": "visible",\n                "type": "\\"visible\\" | \\"collapsed\\" | \\"hidden\\"",\n                "description": ""\n            },\n            {\n                "name": "showWeekdays",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "showWeekNumbers",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "startDate",\n                "type": "{ year: number; month: number; }",\n                "description": ""\n            }\n        ]\n    },\n    "DayTemplateContext": {\n        "fileName": "src/datepicker/datepicker-day-template-context.ts",\n        "className": "DayTemplateContext",\n        "description": "Context for the datepicker \'day\' template in case you want to override the default one",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "currentMonth",\n                "type": "number",\n                "description": "Month currently displayed by the datepicker"\n            },\n            {\n                "name": "date",\n                "type": "NgbDateStruct",\n                "description": "Date that corresponds to the template"\n            },\n            {\n                "name": "disabled",\n                "type": "boolean",\n                "description": "True if current date is disabled"\n            },\n            {\n                "name": "focused",\n                "type": "boolean",\n                "description": "True if current date is focused"\n            },\n            {\n                "name": "selected",\n                "type": "boolean",\n                "description": "True if current date is selected"\n            }\n        ]\n    },\n    "NgbDatepickerDayView": {\n        "fileName": "src/datepicker/datepicker-day-view.ts",\n        "className": "NgbDatepickerDayView",\n        "description": "",\n        "type": "Component",\n        "selector": "[ngbDatepickerDayView]",\n        "inputs": [\n            {\n                "name": "currentMonth",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "date",\n                "type": "NgbDateStruct",\n                "description": ""\n            },\n            {\n                "name": "disabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "focused",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "selected",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NgbDatepickerI18n": {\n        "fileName": "src/datepicker/datepicker-i18n.ts",\n        "className": "NgbDatepickerI18n",\n        "description": "Type of the service supplying month and weekday names to to NgbDatepicker component.\\nSee the i18n demo for how to extend this class and define a custom provider for i18n.",\n        "type": "Service",\n        "methods": [\n            {\n                "name": "getWeekdayShortName",\n                "description": "Returns the short weekday name to display in the heading of the month view.\\nWith default calendar we use ISO 8601: \'weekday\' is 1=Mon ... 7=Sun",\n                "args": [\n                    {\n                        "name": "weekday",\n                        "type": "number"\n                    }\n                ],\n                "returnType": "string"\n            },\n            {\n                "name": "getMonthShortName",\n                "description": "Returns the short month name to display in the date picker navigation.\\nWith default calendar we use ISO 8601: \'month\' is 1=Jan ... 12=Dec",\n                "args": [\n                    {\n                        "name": "month",\n                        "type": "number"\n                    }\n                ],\n                "returnType": "string"\n            },\n            {\n                "name": "getMonthFullName",\n                "description": "Returns the full month name to display in the date picker navigation.\\nWith default calendar we use ISO 8601: \'month\' is 1=January ... 12=December",\n                "args": [\n                    {\n                        "name": "month",\n                        "type": "number"\n                    }\n                ],\n                "returnType": "string"\n            }\n        ],\n        "properties": []\n    },\n    "NgbDatepickerI18nDefault": {\n        "fileName": "src/datepicker/datepicker-i18n.ts",\n        "className": "NgbDatepickerI18nDefault",\n        "description": "",\n        "type": "Service",\n        "methods": [],\n        "properties": []\n    },\n    "NgbInputDatepicker": {\n        "fileName": "src/datepicker/datepicker-input.ts",\n        "className": "NgbInputDatepicker",\n        "description": "A directive that makes it possible to have datepickers on input fields.\\nManages integration with the input field itself (data entry) and ngModel (validation etc.).",\n        "type": "Directive",\n        "selector": "input[ngbDatepicker]",\n        "exportAs": "ngbDatepicker",\n        "inputs": [\n            {\n                "name": "container",\n                "type": "string",\n                "description": "A selector specifying the element the datepicker popup should be appended to.\\nCurrently only supports \\"body\\"."\n            },\n            {\n                "name": "dayTemplate",\n                "type": "TemplateRef<DayTemplateContext>",\n                "description": "Reference for the custom template for the day display"\n            },\n            {\n                "name": "disabled",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "displayMonths",\n                "type": "number",\n                "description": "Number of months to display"\n            },\n            {\n                "name": "firstDayOfWeek",\n                "type": "number",\n                "description": "First day of the week. With default calendar we use ISO 8601: 1=Mon ... 7=Sun"\n            },\n            {\n                "name": "markDisabled",\n                "type": "(date: NgbDateStruct, current: { year: number; month: number; }) => boolean",\n                "description": "Callback to mark a given date as disabled.\\n\'Current\' contains the month that will be displayed in the view"\n            },\n            {\n                "name": "maxDate",\n                "type": "NgbDateStruct",\n                "description": "Max date for the navigation. If not provided will be 10 years from today or `startDate`"\n            },\n            {\n                "name": "minDate",\n                "type": "NgbDateStruct",\n                "description": "Min date for the navigation. If not provided will be 10 years before today or `startDate`"\n            },\n            {\n                "name": "navigation",\n                "type": "\\"select\\" | \\"arrows\\" | \\"none\\"",\n                "description": "Navigation type: `select` (default with select boxes for month and year), `arrows`\\n(without select boxes, only navigation arrows) or `none` (no navigation at all)"\n            },\n            {\n                "name": "outsideDays",\n                "type": "\\"visible\\" | \\"collapsed\\" | \\"hidden\\"",\n                "description": "The way to display days that don\'t belong to current month: `visible` (default),\\n`hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)"\n            },\n            {\n                "name": "placement",\n                "defaultValue": "bottom-left",\n                "type": "PlacementArray",\n                "description": "Placement of a datepicker popup accepts:\\n    \\"top\\", \\"top-left\\", \\"top-right\\", \\"bottom\\", \\"bottom-left\\", \\"bottom-right\\",\\n    \\"left\\", \\"left-top\\", \\"left-bottom\\", \\"right\\", \\"right-top\\", \\"right-bottom\\"\\nand array of above values."\n            },\n            {\n                "name": "showWeekdays",\n                "type": "boolean",\n                "description": "Whether to display days of the week"\n            },\n            {\n                "name": "showWeekNumbers",\n                "type": "boolean",\n                "description": "Whether to display week numbers"\n            },\n            {\n                "name": "startDate",\n                "type": "{ year: number; month: number; }",\n                "description": "Date to open calendar with.\\nWith default calendar we use ISO 8601: \'month\' is 1=Jan ... 12=Dec.\\nIf nothing or invalid date provided, calendar will open with current month.\\nUse \'navigateTo(date)\' as an alternative"\n            }\n        ],\n        "outputs": [\n            {\n                "name": "navigate",\n                "description": "An event fired when navigation happens and currently displayed month changes.\\nSee NgbDatepickerNavigateEvent for the payload info."\n            }\n        ],\n        "properties": [],\n        "methods": [\n            {\n                "name": "open",\n                "description": "Opens the datepicker with the selected date indicated by the ngModel value.",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "close",\n                "description": "Closes the datepicker popup.",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "toggle",\n                "description": "Toggles the datepicker popup (opens when closed and closes when opened).",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "navigateTo",\n                "description": "Navigates current view to provided date.\\nWith default calendar we use ISO 8601: \'month\' is 1=Jan ... 12=Dec.\\nIf nothing or invalid date provided calendar will open current month.\\nUse \'startDate\' input as an alternative",\n                "args": [\n                    {\n                        "name": "date",\n                        "type": "{ year: number; month: number; }"\n                    }\n                ],\n                "returnType": "void"\n            }\n        ]\n    },\n    "NgbDatepickerKeyMapService": {\n        "fileName": "src/datepicker/datepicker-keymap-service.ts",\n        "className": "NgbDatepickerKeyMapService",\n        "description": "",\n        "type": "Service",\n        "methods": [],\n        "properties": []\n    },\n    "NgbDatepickerMonthView": {\n        "fileName": "src/datepicker/datepicker-month-view.ts",\n        "className": "NgbDatepickerMonthView",\n        "description": "",\n        "type": "Component",\n        "selector": "ngb-datepicker-month-view",\n        "inputs": [\n            {\n                "name": "dayTemplate",\n                "type": "TemplateRef<DayTemplateContext>",\n                "description": ""\n            },\n            {\n                "name": "month",\n                "type": "MonthViewModel",\n                "description": ""\n            },\n            {\n                "name": "outsideDays",\n                "type": "\\"visible\\" | \\"collapsed\\" | \\"hidden\\"",\n                "description": ""\n            },\n            {\n                "name": "showWeekdays",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "showWeekNumbers",\n                "type": "any",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "select",\n                "description": ""\n            }\n        ],\n        "properties": [],\n        "methods": []\n    },\n    "NgbDatepickerNavigationSelect": {\n        "fileName": "src/datepicker/datepicker-navigation-select.ts",\n        "className": "NgbDatepickerNavigationSelect",\n        "description": "",\n        "type": "Component",\n        "selector": "ngb-datepicker-navigation-select",\n        "inputs": [\n            {\n                "name": "date",\n                "type": "NgbDate",\n                "description": ""\n            },\n            {\n                "name": "disabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "maxDate",\n                "type": "NgbDate",\n                "description": ""\n            },\n            {\n                "name": "minDate",\n                "type": "NgbDate",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "select",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "months",\n                "type": "number[]",\n                "description": ""\n            },\n            {\n                "name": "years",\n                "type": "number[]",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbDatepickerNavigation": {\n        "fileName": "src/datepicker/datepicker-navigation.ts",\n        "className": "NgbDatepickerNavigation",\n        "description": "",\n        "type": "Component",\n        "selector": "ngb-datepicker-navigation",\n        "inputs": [\n            {\n                "name": "date",\n                "type": "NgbDate",\n                "description": ""\n            },\n            {\n                "name": "disabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "maxDate",\n                "type": "NgbDate",\n                "description": ""\n            },\n            {\n                "name": "minDate",\n                "type": "NgbDate",\n                "description": ""\n            },\n            {\n                "name": "months",\n                "type": "MonthViewModel[]",\n                "description": ""\n            },\n            {\n                "name": "showSelect",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "showWeekNumbers",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "navigate",\n                "description": ""\n            },\n            {\n                "name": "select",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "navigation",\n                "defaultValue": "NavigationEvent",\n                "type": "typeof NavigationEvent",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbDatepickerService": {\n        "fileName": "src/datepicker/datepicker-service.ts",\n        "className": "NgbDatepickerService",\n        "description": "",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "model$",\n                "type": "Observable<DatepickerViewModel>",\n                "description": ""\n            },\n            {\n                "name": "select$",\n                "type": "Observable<NgbDate>",\n                "description": ""\n            }\n        ]\n    },\n    "NgbDatepickerNavigateEvent": {\n        "fileName": "src/datepicker/datepicker.ts",\n        "className": "NgbDatepickerNavigateEvent",\n        "description": "The payload of the datepicker navigation event",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "current",\n                "type": "{ year: number; month: number; }",\n                "description": "Currently displayed month"\n            },\n            {\n                "name": "next",\n                "type": "{ year: number; month: number; }",\n                "description": "Month we\'re navigating to"\n            }\n        ]\n    },\n    "NgbDatepicker": {\n        "fileName": "src/datepicker/datepicker.ts",\n        "className": "NgbDatepicker",\n        "description": "A lightweight and highly configurable datepicker directive",\n        "type": "Component",\n        "selector": "ngb-datepicker",\n        "exportAs": "ngbDatepicker",\n        "inputs": [\n            {\n                "name": "dayTemplate",\n                "type": "TemplateRef<DayTemplateContext>",\n                "description": "Reference for the custom template for the day display"\n            },\n            {\n                "name": "displayMonths",\n                "type": "number",\n                "description": "Number of months to display"\n            },\n            {\n                "name": "firstDayOfWeek",\n                "type": "number",\n                "description": "First day of the week. With default calendar we use ISO 8601: \'weekday\' is 1=Mon ... 7=Sun"\n            },\n            {\n                "name": "markDisabled",\n                "type": "(date: NgbDateStruct, current: { year: number; month: number; }) => boolean",\n                "description": "Callback to mark a given date as disabled.\\n\'Current\' contains the month that will be displayed in the view"\n            },\n            {\n                "name": "maxDate",\n                "type": "NgbDateStruct",\n                "description": "Max date for the navigation. If not provided will be 10 years from today or `startDate`"\n            },\n            {\n                "name": "minDate",\n                "type": "NgbDateStruct",\n                "description": "Min date for the navigation. If not provided will be 10 years before today or `startDate`"\n            },\n            {\n                "name": "navigation",\n                "type": "\\"select\\" | \\"arrows\\" | \\"none\\"",\n                "description": "Navigation type: `select` (default with select boxes for month and year), `arrows`\\n(without select boxes, only navigation arrows) or `none` (no navigation at all)"\n            },\n            {\n                "name": "outsideDays",\n                "type": "\\"visible\\" | \\"collapsed\\" | \\"hidden\\"",\n                "description": "The way to display days that don\'t belong to current month: `visible` (default),\\n`hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)"\n            },\n            {\n                "name": "showWeekdays",\n                "type": "boolean",\n                "description": "Whether to display days of the week"\n            },\n            {\n                "name": "showWeekNumbers",\n                "type": "boolean",\n                "description": "Whether to display week numbers"\n            },\n            {\n                "name": "startDate",\n                "type": "{ year: number; month: number; }",\n                "description": "Date to open calendar with.\\nWith default calendar we use ISO 8601: \'month\' is 1=Jan ... 12=Dec.\\nIf nothing or invalid date provided, calendar will open with current month.\\nUse \'navigateTo(date)\' as an alternative"\n            }\n        ],\n        "outputs": [\n            {\n                "name": "navigate",\n                "description": "An event fired when navigation happens and currently displayed month changes.\\nSee NgbDatepickerNavigateEvent for the payload info."\n            },\n            {\n                "name": "select",\n                "description": "An event fired when user selects a date using keyboard or mouse.\\nThe payload of the event is currently selected NgbDateStruct."\n            }\n        ],\n        "properties": [\n            {\n                "name": "model",\n                "type": "DatepickerViewModel",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "(_: any) => void",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "() => void",\n                "description": ""\n            }\n        ],\n        "methods": [\n            {\n                "name": "focus",\n                "description": "Manually focus the datepicker",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "navigateTo",\n                "description": "Navigates current view to provided date.\\nWith default calendar we use ISO 8601: \'month\' is 1=Jan ... 12=Dec.\\nIf nothing or invalid date provided calendar will open current month.\\nUse \'startDate\' input as an alternative",\n                "args": [\n                    {\n                        "name": "date",\n                        "type": "{ year: number; month: number; }"\n                    }\n                ],\n                "returnType": "void"\n            }\n        ]\n    },\n    "NgbCalendarHijri": {\n        "fileName": "src/datepicker/hijri/ngb-calendar-hijri.ts",\n        "className": "NgbCalendarHijri",\n        "description": "",\n        "type": "Service",\n        "methods": [\n            {\n                "name": "fromGregorian",\n                "description": "Returns the equivalent Hijri date value for a give input Gregorian date.\\n`gDate` is s JS Date to be converted to Hijri.",\n                "args": [\n                    {\n                        "name": "gDate",\n                        "type": "Date"\n                    }\n                ],\n                "returnType": "NgbDate"\n            },\n            {\n                "name": "toGregorian",\n                "description": "Converts the current Hijri date to Gregorian.",\n                "args": [\n                    {\n                        "name": "hijriDate",\n                        "type": "NgbDate"\n                    }\n                ],\n                "returnType": "Date"\n            },\n            {\n                "name": "getDaysInIslamicMonth",\n                "description": "Returns the number of days in a specific Hijri month.\\n`month` is 1 for Muharram, 2 for Safar, etc.\\n`year` is any Hijri year.",\n                "args": [\n                    {\n                        "name": "month",\n                        "type": "number"\n                    },\n                    {\n                        "name": "year",\n                        "type": "number"\n                    }\n                ],\n                "returnType": "number"\n            },\n            {\n                "name": "_getMonthStart",\n                "description": "Returns the start of Hijri Month.\\n`month` is 0 for Muharram, 1 for Safar, etc.\\n`year` is any Hijri year.",\n                "args": [\n                    {\n                        "name": "year",\n                        "type": "number"\n                    },\n                    {\n                        "name": "month",\n                        "type": "number"\n                    }\n                ],\n                "returnType": "number"\n            },\n            {\n                "name": "_getYearStart",\n                "description": "Returns the start of Hijri year.\\n`year` is any Hijri year.",\n                "args": [\n                    {\n                        "name": "year",\n                        "type": "number"\n                    }\n                ],\n                "returnType": "number"\n            }\n        ],\n        "properties": []\n    },\n    "NgbCalendarIslamicCivil": {\n        "fileName": "src/datepicker/hijri/ngb-calendar-islamic-civil.ts",\n        "className": "NgbCalendarIslamicCivil",\n        "description": "",\n        "type": "Service",\n        "methods": [\n            {\n                "name": "fromGregorian",\n                "description": "Returns the equivalent islamic(civil) date value for a give input Gregorian date.\\n`gdate` is a JS Date to be converted to Hijri.",\n                "args": [\n                    {\n                        "name": "gdate",\n                        "type": "Date"\n                    }\n                ],\n                "returnType": "NgbDate"\n            },\n            {\n                "name": "toGregorian",\n                "description": "Returns the equivalent JS date value for a give input islamic(civil) date.\\n`hijriDate` is an islamic(civil) date to be converted to Gregorian.",\n                "args": [\n                    {\n                        "name": "hijriDate",\n                        "type": "NgbDate"\n                    }\n                ],\n                "returnType": "Date"\n            },\n            {\n                "name": "getDaysInIslamicMonth",\n                "description": "Returns the number of days in a specific Hijri month.\\n`month` is 1 for Muharram, 2 for Safar, etc.\\n`year` is any Hijri year.",\n                "args": [\n                    {\n                        "name": "month",\n                        "type": "number"\n                    },\n                    {\n                        "name": "year",\n                        "type": "number"\n                    }\n                ],\n                "returnType": "number"\n            }\n        ],\n        "properties": []\n    },\n    "NgbCalendarIslamicUmalqura": {\n        "fileName": "src/datepicker/hijri/ngb-calendar-islamic-umalqura.ts",\n        "className": "NgbCalendarIslamicUmalqura",\n        "description": "",\n        "type": "Service",\n        "methods": [\n            {\n                "name": "fromGregorian",\n                "description": "Returns the equivalent islamic(Umalqura) date value for a give input Gregorian date.\\n`gdate` is s JS Date to be converted to Hijri.",\n                "args": [\n                    {\n                        "name": "gDate",\n                        "type": "Date"\n                    }\n                ],\n                "returnType": "NgbDate"\n            },\n            {\n                "name": "toGregorian",\n                "description": "Converts the current Hijri date to Gregorian.",\n                "args": [\n                    {\n                        "name": "hijriDate",\n                        "type": "NgbDate"\n                    }\n                ],\n                "returnType": "Date"\n            },\n            {\n                "name": "getDaysInIslamicMonth",\n                "description": "Returns the number of days in a specific Hijri month.\\n`month` is 1 for Muharram, 2 for Safar, etc.\\n`year` is any Hijri year.",\n                "args": [\n                    {\n                        "name": "month",\n                        "type": "number"\n                    },\n                    {\n                        "name": "year",\n                        "type": "number"\n                    }\n                ],\n                "returnType": "number"\n            }\n        ],\n        "properties": []\n    },\n    "NgbCalendar": {\n        "fileName": "src/datepicker/ngb-calendar.ts",\n        "className": "NgbCalendar",\n        "description": "",\n        "type": "Service",\n        "methods": [],\n        "properties": []\n    },\n    "NgbCalendarGregorian": {\n        "fileName": "src/datepicker/ngb-calendar.ts",\n        "className": "NgbCalendarGregorian",\n        "description": "",\n        "type": "Service",\n        "methods": [],\n        "properties": []\n    },\n    "NgbDateAdapter": {\n        "fileName": "src/datepicker/ngb-date-adapter.ts",\n        "className": "NgbDateAdapter",\n        "description": "Abstract type serving as a DI token for the service converting from your application Date model to internal\\nNgbDateStruct model.\\nA default implementation converting from and to NgbDateStruct is provided for retro-compatibility,\\nbut you can provide another implementation to use an alternative format, ie for using with native Date Object.",\n        "type": "Service",\n        "methods": [\n            {\n                "name": "fromModel",\n                "description": "Converts user-model date into an NgbDateStruct for internal use in the library",\n                "args": [\n                    {\n                        "name": "value",\n                        "type": "T"\n                    }\n                ],\n                "returnType": "NgbDateStruct"\n            },\n            {\n                "name": "toModel",\n                "description": "Converts internal date value NgbDateStruct to user-model date\\nThe returned type is suposed to be of the same type as fromModel() input-value param",\n                "args": [\n                    {\n                        "name": "date",\n                        "type": "NgbDateStruct"\n                    }\n                ],\n                "returnType": "T"\n            }\n        ],\n        "properties": []\n    },\n    "NgbDateStructAdapter": {\n        "fileName": "src/datepicker/ngb-date-adapter.ts",\n        "className": "NgbDateStructAdapter",\n        "description": "",\n        "type": "Service",\n        "methods": [\n            {\n                "name": "fromModel",\n                "description": "Converts a NgbDateStruct value into NgbDateStruct value",\n                "args": [\n                    {\n                        "name": "date",\n                        "type": "NgbDateStruct"\n                    }\n                ],\n                "returnType": "NgbDateStruct"\n            },\n            {\n                "name": "toModel",\n                "description": "Converts a NgbDateStruct value into NgbDateStruct value",\n                "args": [\n                    {\n                        "name": "date",\n                        "type": "NgbDateStruct"\n                    }\n                ],\n                "returnType": "NgbDateStruct"\n            }\n        ],\n        "properties": []\n    },\n    "NgbDateParserFormatter": {\n        "fileName": "src/datepicker/ngb-date-parser-formatter.ts",\n        "className": "NgbDateParserFormatter",\n        "description": "Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker\\ndirective. A default implementation using the ISO 8601 format is provided, but you can provide another implementation\\nto use an alternative format.",\n        "type": "Class",\n        "methods": [\n            {\n                "name": "parse",\n                "description": "Parses the given value to an NgbDateStruct. Implementations should try their best to provide a result, even\\npartial. They must return null if the value can\'t be parsed.",\n                "args": [\n                    {\n                        "name": "value",\n                        "type": "string"\n                    }\n                ],\n                "returnType": "NgbDateStruct"\n            },\n            {\n                "name": "format",\n                "description": "Formats the given date to a string. Implementations should return an empty string if the given date is null,\\nand try their best to provide a partial result if the given date is incomplete or invalid.",\n                "args": [\n                    {\n                        "name": "date",\n                        "type": "NgbDateStruct"\n                    }\n                ],\n                "returnType": "string"\n            }\n        ],\n        "properties": []\n    },\n    "NgbDateStruct": {\n        "fileName": "src/datepicker/ngb-date-struct.ts",\n        "className": "NgbDateStruct",\n        "description": "Interface of the model of the NgbDatepicker and NgbInputDatepicker directives",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "day",\n                "type": "number",\n                "description": "The day of month, starting at 1"\n            },\n            {\n                "name": "month",\n                "type": "number",\n                "description": "The month, for example 1=Jan ... 12=Dec"\n            },\n            {\n                "name": "year",\n                "type": "number",\n                "description": "The year, for example 2016"\n            }\n        ]\n    },\n    "NgbDropdownConfig": {\n        "fileName": "src/dropdown/dropdown-config.ts",\n        "className": "NgbDropdownConfig",\n        "description": "Configuration service for the NgbDropdown directive.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the dropdowns used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "autoClose",\n                "defaultValue": "true",\n                "type": "boolean | \\"outside\\" | \\"inside\\"",\n                "description": ""\n            },\n            {\n                "name": "placement",\n                "defaultValue": "bottom-left",\n                "type": "PlacementArray",\n                "description": ""\n            }\n        ]\n    },\n    "NgbDropdownMenu": {\n        "fileName": "src/dropdown/dropdown.ts",\n        "className": "NgbDropdownMenu",\n        "description": "",\n        "type": "Directive",\n        "selector": "[ngbDropdownMenu]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "isOpen",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "placement",\n                "defaultValue": "bottom",\n                "type": "Placement",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbDropdownToggle": {\n        "fileName": "src/dropdown/dropdown.ts",\n        "className": "NgbDropdownToggle",\n        "description": "Allows the dropdown to be toggled via click. This directive is optional.",\n        "type": "Directive",\n        "selector": "[ngbDropdownToggle]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "anchorEl",\n                "type": "any",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbDropdown": {\n        "fileName": "src/dropdown/dropdown.ts",\n        "className": "NgbDropdown",\n        "description": "Transforms a node into a dropdown.",\n        "type": "Directive",\n        "selector": "[ngbDropdown]",\n        "exportAs": "ngbDropdown",\n        "inputs": [\n            {\n                "name": "autoClose",\n                "type": "boolean | \\"outside\\" | \\"inside\\"",\n                "description": "Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\\nWhen it is true (default) dropdowns are automatically closed on both outside and inside (menu) clicks.\\nWhen it is false dropdowns are never automatically closed.\\nWhen it is \'outside\' dropdowns are automatically closed on outside clicks but not on menu clicks.\\nWhen it is \'inside\' dropdowns are automatically on menu clicks but not on outside clicks."\n            },\n            {\n                "name": "open",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": "Defines whether or not the dropdown-menu is open initially."\n            },\n            {\n                "name": "placement",\n                "type": "PlacementArray",\n                "description": "Placement of a popover accepts:\\n    \\"top\\", \\"top-left\\", \\"top-right\\", \\"bottom\\", \\"bottom-left\\", \\"bottom-right\\",\\n    \\"left\\", \\"left-top\\", \\"left-bottom\\", \\"right\\", \\"right-top\\", \\"right-bottom\\"\\nand array of above values."\n            }\n        ],\n        "outputs": [\n            {\n                "name": "openChange",\n                "description": "An event fired when the dropdown is opened or closed.\\nEvent\'s payload equals whether dropdown is open."\n            }\n        ],\n        "properties": [],\n        "methods": [\n            {\n                "name": "isOpen",\n                "description": "Checks if the dropdown menu is open or not.",\n                "args": [],\n                "returnType": "boolean"\n            },\n            {\n                "name": "open",\n                "description": "Opens the dropdown menu of a given navbar or tabbed navigation.",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "close",\n                "description": "Closes the dropdown menu of a given navbar or tabbed navigation.",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "toggle",\n                "description": "Toggles the dropdown menu of a given navbar or tabbed navigation.",\n                "args": [],\n                "returnType": "void"\n            }\n        ]\n    },\n    "NzFormControlComponent": {\n        "fileName": "src/form/nz-form-control.component.ts",\n        "className": "NzFormControlComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-form-control]",\n        "inputs": [\n            {\n                "name": "nzHasFeedback",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzValidateStatus",\n                "type": "string | NgControl",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "hasFeedBack",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "isError",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "isSuccess",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "isValidate",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "isWarning",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "ngControl",\n                "type": "NgControl",\n                "description": ""\n            },\n            {\n                "name": "nzHasFeedback",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzValidateStatus",\n                "type": "string | NgControl",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzFormExplainComponent": {\n        "fileName": "src/form/nz-form-explain.directive.ts",\n        "className": "NzFormExplainComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-form-explain]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzFormExtraDirective": {\n        "fileName": "src/form/nz-form-extra.directive.ts",\n        "className": "NzFormExtraDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-form-extra]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzFormItemRequiredDirective": {\n        "fileName": "src/form/nz-form-item-required.directive.ts",\n        "className": "NzFormItemRequiredDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-form-item-required]",\n        "inputs": [\n            {\n                "name": "nzRequired",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "nzRequired",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzFormItemDirective": {\n        "fileName": "src/form/nz-form-item.directive.ts",\n        "className": "NzFormItemDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-form-item]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_withHelp",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "withHelp",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzFormLabelDirective": {\n        "fileName": "src/form/nz-form-label.directive.ts",\n        "className": "NzFormLabelDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-form-label]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzFormSplitDirective": {\n        "fileName": "src/form/nz-form-split.directive.ts",\n        "className": "NzFormSplitDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-form-split]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzFormTextDirective": {\n        "fileName": "src/form/nz-form-text.directive.ts",\n        "className": "NzFormTextDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-form-text]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzFormComponent": {\n        "fileName": "src/form/nz-form.component.ts",\n        "className": "NzFormComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-form]",\n        "inputs": [\n            {\n                "name": "nzLayout",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzType",\n                "defaultValue": "horizontal",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_classList",\n                "type": "string[]",\n                "description": ""\n            },\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-form",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzInputGroupComponent": {\n        "fileName": "src/input/nz-input-group.component.ts",\n        "className": "NzInputGroupComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-input-group",\n        "inputs": [\n            {\n                "name": "nzCompact",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_isLarge",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_isSmall",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-input",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzCompact",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "AutoSizeType": {\n        "fileName": "src/input/nz-input.component.ts",\n        "className": "AutoSizeType",\n        "description": "",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "maxRows",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "minRows",\n                "type": "number",\n                "description": ""\n            }\n        ]\n    },\n    "NzInputComponent": {\n        "fileName": "src/input/nz-input.component.ts",\n        "className": "NzInputComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-input",\n        "inputs": [\n            {\n                "name": "nzAutosize",\n                "type": "string | boolean | AutoSizeType",\n                "description": ""\n            },\n            {\n                "name": "nzCols",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzId",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzPlaceHolder",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzReadonly",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzRows",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzType",\n                "defaultValue": "text",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzBlur",\n                "description": ""\n            },\n            {\n                "name": "nzFocus",\n                "description": ""\n            },\n            {\n                "name": "nzOnSearch",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_addOnContentAfter",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "_addOnContentBefore",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "_autosize",\n                "defaultValue": "false",\n                "type": "boolean | AutoSizeType",\n                "description": ""\n            },\n            {\n                "name": "_classMap",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "_composing",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-input",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_prefixContent",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "_size",\n                "defaultValue": "default",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_suffixContent",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "_value",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzAutosize",\n                "type": "string | boolean | AutoSizeType",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzReadonly",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzValue",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "(value: string) => void",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "() => void",\n                "description": ""\n            },\n            {\n                "name": "textAreaRef",\n                "type": "ElementRef<any>",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzInputDirectiveComponent": {\n        "fileName": "src/input/nz-input.directive.component.ts",\n        "className": "NzInputDirectiveComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-input]",\n        "inputs": [\n            {\n                "name": "nzAutosize",\n                "type": "string | boolean | AutoSizeType",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzReadonly",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_autosize",\n                "defaultValue": "false",\n                "type": "boolean | AutoSizeType",\n                "description": ""\n            },\n            {\n                "name": "nativeElement",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "nzAutosize",\n                "type": "string | boolean | AutoSizeType",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzReadonly",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setLgClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setSmClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "size",\n                "defaultValue": "default",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzContentComponent": {\n        "fileName": "src/layout/nz-content.component.ts",\n        "className": "NzContentComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-content",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzFooterComponent": {\n        "fileName": "src/layout/nz-footer.component.ts",\n        "className": "NzFooterComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-footer",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzHeaderComponent": {\n        "fileName": "src/layout/nz-header.component.ts",\n        "className": "NzHeaderComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-header",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzLayoutComponent": {\n        "fileName": "src/layout/nz-layout.component.ts",\n        "className": "NzLayoutComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-layout",\n        "inputs": [],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "hasSider",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzSiderComponent": {\n        "fileName": "src/layout/nz-sider.component.ts",\n        "className": "NzSiderComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-sider",\n        "inputs": [\n            {\n                "name": "nzBreakpoint",\n                "type": "NzBreakPoinit",\n                "description": ""\n            },\n            {\n                "name": "nzCollapsed",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzCollapsedWidth",\n                "defaultValue": "64",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzCollapsible",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzTrigger",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzWidth",\n                "defaultValue": "200",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzCollapsedChange",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_below",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_dimensionMap",\n                "type": "{ xl: string; lg: string; md: string; sm: string; xs: string; }",\n                "description": ""\n            },\n            {\n                "name": "_isSiderTrgger",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_isZeroTrigger",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzCollapsed",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzCollapsible",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzTrigger",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setFlex",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "setWidth",\n                "type": "string | number",\n                "description": ""\n            },\n            {\n                "name": "setZeroClass",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzLocaleService": {\n        "fileName": "src/locale/nz-locale.service.ts",\n        "className": "NzLocaleService",\n        "description": "",\n        "type": "Service",\n        "methods": [\n            {\n                "name": "setLocale",\n                "description": "Set/Change current locale globally throughout the WHOLE application\\n[NOTE] If called at runtime, rendered interface may not change along with the locale change (because this do not\\ntrigger another render schedule)",\n                "args": [\n                    {\n                        "name": "locale",\n                        "type": "NzLocale"\n                    }\n                ],\n                "returnType": "void"\n            }\n        ],\n        "properties": []\n    },\n    "NzMenuDividerComponent": {\n        "fileName": "src/menu/nz-menu-divider.component.ts",\n        "className": "NzMenuDividerComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-menu-divider]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzMenuGroupComponent": {\n        "fileName": "src/menu/nz-menu-group.component.ts",\n        "className": "NzMenuGroupComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-menu-group]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzMenuItemComponent": {\n        "fileName": "src/menu/nz-menu-item.component.ts",\n        "className": "NzMenuItemComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-menu-item]",\n        "inputs": [\n            {\n                "name": "nzDisable",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSelected",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_isInDropDownClass",\n                "type": "boolean",\n                "description": "define host class "\n            },\n            {\n                "name": "_isNotInDropDownClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "isInDropDown",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "level",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzDisable",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSelected",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "padding",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "setDropDownDisableClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuDisableClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setPaddingLeft",\n                "type": "number",\n                "description": ""\n            }\n        ],\n        "methods": [\n            {\n                "name": "_onClickItem",\n                "description": "clear all item selected status except this ",\n                "args": [],\n                "returnType": "void"\n            }\n        ]\n    },\n    "NzMenuComponent": {\n        "fileName": "src/menu/nz-menu.component.ts",\n        "className": "NzMenuComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-menu]",\n        "inputs": [\n            {\n                "name": "nzClickActive",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzInlineCollapsed",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzMode",\n                "defaultValue": "vertical",\n                "type": "NzMode",\n                "description": ""\n            },\n            {\n                "name": "nzTheme",\n                "defaultValue": "light",\n                "type": "\\"light\\" | \\"dark\\"",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_isInDropDownClass",\n                "type": "boolean",\n                "description": "define host class "\n            },\n            {\n                "name": "_isNotInDropDownClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_subMenusOpenIndex",\n                "type": "any[]",\n                "description": "opened index of array "\n            },\n            {\n                "name": "_tempMode",\n                "type": "NzMode",\n                "description": "temporary mode "\n            },\n            {\n                "name": "hasSubMenu",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": "set when has submenu component "\n            },\n            {\n                "name": "isInDropDown",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": "set when in dropdown component "\n            },\n            {\n                "name": "isInit",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": "view init flat "\n            },\n            {\n                "name": "menuItems",\n                "type": "NzMenuItemComponent[]",\n                "description": "collection of menu item "\n            },\n            {\n                "name": "nzClickActive",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzInlineCollapsed",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setDropDownThemeDarkClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setDropDownThemeLightClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuHorizontalClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuInlineClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuInlineCollapsedClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuThemeDarkClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuThemeLightClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuVerticalClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "subMenus",\n                "type": "NzSubMenuComponent[]",\n                "description": "collection of sub menu "\n            }\n        ],\n        "methods": [\n            {\n                "name": "clearAllSelected",\n                "description": "trigger when menu item clicked ",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "setDropDown",\n                "description": "api for dropdown or navigation to set isInDropDown status ",\n                "args": [\n                    {\n                        "name": "value",\n                        "type": "boolean"\n                    }\n                ],\n                "returnType": "void"\n            }\n        ]\n    },\n    "NzSubMenuComponent": {\n        "fileName": "src/menu/nz-submenu.component.ts",\n        "className": "NzSubMenuComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-submenu]",\n        "inputs": [\n            {\n                "name": "nzOpen",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzOpenChange",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_$mouseSubject",\n                "type": "Subject<{}>",\n                "description": ""\n            },\n            {\n                "name": "expandState",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "isInDropDown",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "level",\n                "defaultValue": "1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzOpen",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setDropDownHorizontalClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setDropDownSubmenuClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setDropDownVerticalClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuHorizontalClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuInlineClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuSubmenuClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuSubmenuOpenClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuSubmenuSelectedClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "setMenuVerticalClass",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "subItemSelected",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "subMenus",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "submenuSelected",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbModalBackdrop": {\n        "fileName": "src/modal/modal-backdrop.ts",\n        "className": "NgbModalBackdrop",\n        "description": "",\n        "type": "Component",\n        "selector": "ngb-modal-backdrop",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NgbActiveModal": {\n        "fileName": "src/modal/modal-ref.ts",\n        "className": "NgbActiveModal",\n        "description": "A reference to an active (currently opened) modal. Instances of this class\\ncan be injected into components passed as modal content.",\n        "type": "Class",\n        "methods": [\n            {\n                "name": "close",\n                "description": "Can be used to close a modal, passing an optional result.",\n                "args": [\n                    {\n                        "name": "result",\n                        "type": "any"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "dismiss",\n                "description": "Can be used to dismiss a modal, passing an optional reason.",\n                "args": [\n                    {\n                        "name": "reason",\n                        "type": "any"\n                    }\n                ],\n                "returnType": "void"\n            }\n        ],\n        "properties": []\n    },\n    "NgbModalRef": {\n        "fileName": "src/modal/modal-ref.ts",\n        "className": "NgbModalRef",\n        "description": "A reference to a newly opened modal.",\n        "type": "Class",\n        "methods": [\n            {\n                "name": "close",\n                "description": "Can be used to close a modal, passing an optional result.",\n                "args": [\n                    {\n                        "name": "result",\n                        "type": "any"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "dismiss",\n                "description": "Can be used to dismiss a modal, passing an optional reason.",\n                "args": [\n                    {\n                        "name": "reason",\n                        "type": "any"\n                    }\n                ],\n                "returnType": "void"\n            }\n        ],\n        "properties": [\n            {\n                "name": "componentInstance",\n                "type": "any",\n                "description": "The instance of component used as modal\'s content.\\nUndefined when a TemplateRef is used as modal\'s content."\n            },\n            {\n                "name": "result",\n                "type": "Promise<any>",\n                "description": "A promise that is resolved when a modal is closed and rejected when a modal is dismissed."\n            }\n        ]\n    },\n    "NgbModalStack": {\n        "fileName": "src/modal/modal-stack.ts",\n        "className": "NgbModalStack",\n        "description": "",\n        "type": "Service",\n        "methods": [],\n        "properties": []\n    },\n    "NgbModalWindow": {\n        "fileName": "src/modal/modal-window.ts",\n        "className": "NgbModalWindow",\n        "description": "",\n        "type": "Component",\n        "selector": "ngb-modal-window",\n        "inputs": [\n            {\n                "name": "backdrop",\n                "defaultValue": "true",\n                "type": "string | boolean",\n                "description": ""\n            },\n            {\n                "name": "keyboard",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "size",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "windowClass",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "dismiss",\n                "description": ""\n            }\n        ],\n        "properties": [],\n        "methods": []\n    },\n    "NgbModalOptions": {\n        "fileName": "src/modal/modal.ts",\n        "className": "NgbModalOptions",\n        "description": "Represent options available when opening new modal windows.",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "backdrop",\n                "type": "boolean | \\"static\\"",\n                "description": "Whether a backdrop element should be created for a given modal (true by default).\\nAlternatively, specify \'static\' for a backdrop which doesn\'t close the modal on click."\n            },\n            {\n                "name": "beforeDismiss",\n                "type": "() => boolean",\n                "description": "Function called when a modal will be dismissed.\\nIf this function returns false, the modal is not dismissed."\n            },\n            {\n                "name": "container",\n                "type": "string",\n                "description": "An element to which to attach newly opened modal windows."\n            },\n            {\n                "name": "injector",\n                "type": "Injector",\n                "description": "Injector to use for modal content."\n            },\n            {\n                "name": "keyboard",\n                "type": "boolean",\n                "description": "Whether to close the modal when escape key is pressed (true by default)."\n            },\n            {\n                "name": "size",\n                "type": "\\"lg\\" | \\"sm\\"",\n                "description": "Size of a new modal window."\n            },\n            {\n                "name": "windowClass",\n                "type": "string",\n                "description": "Custom class to append to the modal window"\n            }\n        ]\n    },\n    "NgbModal": {\n        "fileName": "src/modal/modal.ts",\n        "className": "NgbModal",\n        "description": "A service to open modal windows. Creating a modal is straightforward: create a template and pass it as an argument to\\nthe \\"open\\" method!",\n        "type": "Service",\n        "methods": [\n            {\n                "name": "open",\n                "description": "Opens a new modal window with the specified content and using supplied options. Content can be provided\\nas a TemplateRef or a component type. If you pass a component type as content than instances of those\\ncomponents can be injected with an instance of the NgbActiveModal class. You can use methods on the\\nNgbActiveModal class to close / dismiss modals from \\"inside\\" of a component.",\n                "args": [\n                    {\n                        "name": "content",\n                        "type": "any"\n                    },\n                    {\n                        "name": "options",\n                        "type": "NgbModalOptions"\n                    }\n                ],\n                "returnType": "NgbModalRef"\n            }\n        ],\n        "properties": []\n    },\n    "NzDropDownButtonComponent": {\n        "fileName": "src/nzdropdown/nz-dropdown-button.component.ts",\n        "className": "NzDropDownButtonComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-dropdown-button",\n        "inputs": [\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "defaultValue": "default",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzType",\n                "defaultValue": "default",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzClick",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_disabled",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_nzOrigin",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "_onVisibleChange",\n                "type": "(visible: boolean) => void",\n                "description": ""\n            },\n            {\n                "name": "content",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzDropDownComponent": {\n        "fileName": "src/nzdropdown/nz-dropdown.component.ts",\n        "className": "NzDropDownComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-dropdown",\n        "inputs": [\n            {\n                "name": "nzClickHide",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzPlacement",\n                "type": "NzPlacement",\n                "description": ""\n            },\n            {\n                "name": "nzTrigger",\n                "defaultValue": "hover",\n                "type": "\\"click\\" | \\"hover\\"",\n                "description": ""\n            },\n            {\n                "name": "nzVisible",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "_visibleChange",\n                "description": ""\n            },\n            {\n                "name": "nzVisibleChange",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_cdkOverlay",\n                "type": "CdkConnectedOverlay",\n                "description": ""\n            },\n            {\n                "name": "_dropDownPosition",\n                "defaultValue": "bottom",\n                "type": "\\"top\\" | \\"bottom\\" | \\"center\\"",\n                "description": ""\n            },\n            {\n                "name": "_hasBackdrop",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_nzMenu",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "_nzOrigin",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "_onVisibleChange",\n                "type": "(visible: boolean) => void",\n                "description": ""\n            },\n            {\n                "name": "_placement",\n                "defaultValue": "bottomLeft",\n                "type": "NzPlacement",\n                "description": ""\n            },\n            {\n                "name": "_positions",\n                "type": "ConnectionPositionPair[]",\n                "description": ""\n            },\n            {\n                "name": "_subscription",\n                "type": "Subscription",\n                "description": ""\n            },\n            {\n                "name": "_triggerWidth",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "hasFilterButton",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzClickHide",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzPlacement",\n                "type": "NzPlacement",\n                "description": ""\n            },\n            {\n                "name": "nzVisible",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzDropDownDirective": {\n        "fileName": "src/nzdropdown/nz-dropdown.directive.ts",\n        "className": "NzDropDownDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-dropdown]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzPaginationComponent": {\n        "fileName": "src/nzpagination/nz-pagination.component.ts",\n        "className": "NzPaginationComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-pagination",\n        "inputs": [\n            {\n                "name": "nzInTable",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzPageIndex",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzPageSize",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzPageSizeSelectorValues",\n                "type": "number[]",\n                "description": "page size changer select values "\n            },\n            {\n                "name": "nzShowQuickJumper",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowSizeChanger",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowTotal",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSimple",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzTotal",\n                "type": "number",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzPageIndexChange",\n                "description": ""\n            },\n            {\n                "name": "nzPageIndexClickChange",\n                "description": ""\n            },\n            {\n                "name": "nzPageSizeChange",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_current",\n                "defaultValue": "1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_firstIndex",\n                "defaultValue": "1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "_isFirstIndex",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_isLastIndex",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_lastIndex",\n                "defaultValue": "Infinity",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "_options",\n                "type": "number[]",\n                "description": ""\n            },\n            {\n                "name": "_pages",\n                "type": "any[]",\n                "description": ""\n            },\n            {\n                "name": "_pageSize",\n                "defaultValue": "10",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "_roundPageSize",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "_total",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzPageIndex",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzPageSize",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzShowQuickJumper",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowSizeChanger",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowTotal",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSimple",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzTotal",\n                "type": "number",\n                "description": ""\n            }\n        ],\n        "methods": [\n            {\n                "name": "_buildIndexes",\n                "description": "generate indexes list ",\n                "args": [],\n                "returnType": "void"\n            }\n        ]\n    },\n    "NzToolTipComponent": {\n        "fileName": "src/nztooltip/nz-tooltip.component.ts",\n        "className": "NzToolTipComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-tooltip",\n        "inputs": [\n            {\n                "name": "nzMouseEnterDelay",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzMouseLeaveDelay",\n                "defaultValue": "0.1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzOverlayClassName",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzOverlayStyle",\n                "type": "{}",\n                "description": ""\n            },\n            {\n                "name": "nzPlacement",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzTitle",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzTrigger",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzVisible",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzVisibleChange",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_classMap",\n                "type": "{}",\n                "description": ""\n            },\n            {\n                "name": "_hasBackdrop",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_placement",\n                "defaultValue": "top",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_positions",\n                "type": "ConnectionPositionPair[]",\n                "description": ""\n            },\n            {\n                "name": "_prefix",\n                "defaultValue": "ant-tooltip-placement",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_trigger",\n                "defaultValue": "hover",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzPlacement",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzTemplate",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "nzTrigger",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzVisible",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "overlay",\n                "type": "CdkConnectedOverlay",\n                "description": ""\n            },\n            {\n                "name": "overlayOrigin",\n                "type": "CdkOverlayOrigin",\n                "description": ""\n            },\n            {\n                "name": "visible$",\n                "type": "Observable<boolean>",\n                "description": ""\n            },\n            {\n                "name": "visibleSource",\n                "type": "BehaviorSubject<boolean>",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzTooltipDirective": {\n        "fileName": "src/nztooltip/nz-tooltip.directive.ts",\n        "className": "NzTooltipDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-tooltip]",\n        "inputs": [\n            {\n                "name": "nz-tooltip",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "isTooltipOpen",\n                "type": "any",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbPaginationConfig": {\n        "fileName": "src/pagination/pagination-config.ts",\n        "className": "NgbPaginationConfig",\n        "description": "Configuration service for the NgbPagination component.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the paginations used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "boundaryLinks",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "directionLinks",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "disabled",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "ellipses",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "maxSize",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "pageSize",\n                "defaultValue": "10",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "rotate",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "size",\n                "type": "\\"lg\\" | \\"sm\\"",\n                "description": ""\n            }\n        ]\n    },\n    "NgbPagination": {\n        "fileName": "src/pagination/pagination.ts",\n        "className": "NgbPagination",\n        "description": "A directive that will take care of visualising a pagination bar and enable / disable buttons correctly!",\n        "type": "Component",\n        "selector": "ngb-pagination",\n        "inputs": [\n            {\n                "name": "boundaryLinks",\n                "type": "boolean",\n                "description": "Whether to show the \\"First\\" and \\"Last\\" page links"\n            },\n            {\n                "name": "collectionSize",\n                "type": "number",\n                "description": "Number of items in collection."\n            },\n            {\n                "name": "directionLinks",\n                "type": "boolean",\n                "description": "Whether to show the \\"Next\\" and \\"Previous\\" page links"\n            },\n            {\n                "name": "disabled",\n                "type": "boolean",\n                "description": "Whether to disable buttons from user input"\n            },\n            {\n                "name": "ellipses",\n                "type": "boolean",\n                "description": "Whether to show ellipsis symbols and first/last page numbers when maxSize > number of pages"\n            },\n            {\n                "name": "maxSize",\n                "type": "number",\n                "description": "Maximum number of pages to display."\n            },\n            {\n                "name": "page",\n                "defaultValue": "0",\n                "type": "number",\n                "description": "Current page."\n            },\n            {\n                "name": "pageSize",\n                "type": "number",\n                "description": "Number of items per page."\n            },\n            {\n                "name": "rotate",\n                "type": "boolean",\n                "description": "Whether to rotate pages when maxSize > number of pages.\\nCurrent page will be in the middle"\n            },\n            {\n                "name": "size",\n                "type": "\\"lg\\" | \\"sm\\"",\n                "description": "Pagination display size: small or large"\n            }\n        ],\n        "outputs": [\n            {\n                "name": "pageChange",\n                "description": "An event fired when the page is changed.\\nEvent\'s payload equals to the newly selected page."\n            }\n        ],\n        "properties": [\n            {\n                "name": "pageCount",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "pages",\n                "type": "number[]",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzPopconfirmComponent": {\n        "fileName": "src/popconfirm/nz-popconfirm.component.ts",\n        "className": "NzPopconfirmComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-popconfirm",\n        "inputs": [\n            {\n                "name": "nzCancelText",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzCondition",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzContent",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "nzOkText",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzOnCancel",\n                "description": ""\n            },\n            {\n                "name": "nzOnConfirm",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_hasBackdrop",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_prefix",\n                "defaultValue": "ant-popover-placement",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_trigger",\n                "defaultValue": "click",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzCondition",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzPopconfirmDirective": {\n        "fileName": "src/popconfirm/nz-popconfirm.directive.ts",\n        "className": "NzPopconfirmDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-popconfirm]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NgbPopoverConfig": {\n        "fileName": "src/popover/popover-config.ts",\n        "className": "NgbPopoverConfig",\n        "description": "Configuration service for the NgbPopover directive.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the popovers used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "container",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "placement",\n                "defaultValue": "top",\n                "type": "PlacementArray",\n                "description": ""\n            },\n            {\n                "name": "triggers",\n                "defaultValue": "click",\n                "type": "string",\n                "description": ""\n            }\n        ]\n    },\n    "NgbPopoverWindow": {\n        "fileName": "src/popover/popover.ts",\n        "className": "NgbPopoverWindow",\n        "description": "",\n        "type": "Component",\n        "selector": "ngb-popover-window",\n        "inputs": [\n            {\n                "name": "id",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "placement",\n                "defaultValue": "top",\n                "type": "Placement",\n                "description": ""\n            },\n            {\n                "name": "title",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NgbPopover": {\n        "fileName": "src/popover/popover.ts",\n        "className": "NgbPopover",\n        "description": "A lightweight, extensible directive for fancy popover creation.",\n        "type": "Directive",\n        "selector": "[ngbPopover]",\n        "exportAs": "ngbPopover",\n        "inputs": [\n            {\n                "name": "container",\n                "type": "string",\n                "description": "A selector specifying the element the popover should be appended to.\\nCurrently only supports \\"body\\"."\n            },\n            {\n                "name": "ngbPopover",\n                "type": "string | TemplateRef<any>",\n                "description": "Content to be displayed as popover."\n            },\n            {\n                "name": "placement",\n                "type": "PlacementArray",\n                "description": "Placement of a popover accepts:\\n    \\"top\\", \\"top-left\\", \\"top-right\\", \\"bottom\\", \\"bottom-left\\", \\"bottom-right\\",\\n    \\"left\\", \\"left-top\\", \\"left-bottom\\", \\"right\\", \\"right-top\\", \\"right-bottom\\"\\nand array of above values."\n            },\n            {\n                "name": "popoverTitle",\n                "type": "string",\n                "description": "Title of a popover."\n            },\n            {\n                "name": "triggers",\n                "type": "string",\n                "description": "Specifies events that should trigger. Supports a space separated list of event names."\n            }\n        ],\n        "outputs": [\n            {\n                "name": "hidden",\n                "description": "Emits an event when the popover is hidden"\n            },\n            {\n                "name": "shown",\n                "description": "Emits an event when the popover is shown"\n            }\n        ],\n        "properties": [],\n        "methods": [\n            {\n                "name": "open",\n                "description": "Opens an element’s popover. This is considered a “manual” triggering of the popover.\\nThe context is an optional value to be injected into the popover template when it is created.",\n                "args": [\n                    {\n                        "name": "context",\n                        "type": "any"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "close",\n                "description": "Closes an element’s popover. This is considered a “manual” triggering of the popover.",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "toggle",\n                "description": "Toggles an element’s popover. This is considered a “manual” triggering of the popover.",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "isOpen",\n                "description": "Returns whether or not the popover is currently being shown",\n                "args": [],\n                "returnType": "boolean"\n            }\n        ]\n    },\n    "NgbProgressbarConfig": {\n        "fileName": "src/progressbar/progressbar-config.ts",\n        "className": "NgbProgressbarConfig",\n        "description": "Configuration service for the NgbProgressbar component.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the progress bars used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "animated",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "height",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "max",\n                "defaultValue": "100",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "showValue",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "striped",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "type",\n                "type": "string",\n                "description": ""\n            }\n        ]\n    },\n    "NgbProgressbar": {\n        "fileName": "src/progressbar/progressbar.ts",\n        "className": "NgbProgressbar",\n        "description": "Directive that can be used to provide feedback on the progress of a workflow or an action.",\n        "type": "Component",\n        "selector": "ngb-progressbar",\n        "inputs": [\n            {\n                "name": "animated",\n                "type": "boolean",\n                "description": "A flag indicating if the stripes of the progress bar should be animated. Takes effect only for browsers\\nsupporting CSS3 animations, and if striped is true."\n            },\n            {\n                "name": "height",\n                "type": "string",\n                "description": "Height of the progress bar. Accepts any valid CSS height values, ex. \'2rem\'"\n            },\n            {\n                "name": "max",\n                "type": "number",\n                "description": "Maximal value to be displayed in the progressbar."\n            },\n            {\n                "name": "showValue",\n                "type": "boolean",\n                "description": "A flag indicating if the current percentage value should be shown."\n            },\n            {\n                "name": "striped",\n                "type": "boolean",\n                "description": "A flag indicating if a progress bar should be displayed as striped."\n            },\n            {\n                "name": "type",\n                "type": "string",\n                "description": "Type of progress bar, can be one of \\"success\\", \\"info\\", \\"warning\\" or \\"danger\\"."\n            },\n            {\n                "name": "value",\n                "defaultValue": "0",\n                "type": "number",\n                "description": "Current value to be displayed in the progressbar. Should be smaller or equal to \\"max\\" value."\n            }\n        ],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzRadioButtonComponent": {\n        "fileName": "src/radio/nz-radio-button.component.ts",\n        "className": "NzRadioButtonComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-radio-button]",\n        "inputs": [\n            {\n                "name": "nzChecked",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_checked",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_disabled",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_innerPrefixCls",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_inputPrefixCls",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-radio-button",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzChecked",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzRadioGroupComponent": {\n        "fileName": "src/radio/nz-radio-group.component.ts",\n        "className": "NzRadioGroupComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-radio-group",\n        "inputs": [\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-radio-group",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_size",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_value",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "isLarge",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "isSmall",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "(_: string) => void",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "() => void",\n                "description": ""\n            },\n            {\n                "name": "radios",\n                "type": "(NzRadioButtonComponent | NzRadioComponent)[]",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzRadioComponent": {\n        "fileName": "src/radio/nz-radio.component.ts",\n        "className": "NzRadioComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-radio]",\n        "inputs": [\n            {\n                "name": "nzChecked",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzValue",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_checked",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_classMap",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "_disabled",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_innerPrefixCls",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_inputPrefixCls",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-radio",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_value",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzChecked",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "(_: boolean) => void",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "() => void",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbRatingConfig": {\n        "fileName": "src/rating/rating-config.ts",\n        "className": "NgbRatingConfig",\n        "description": "Configuration service for the NgbRating component.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the ratings used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "max",\n                "defaultValue": "10",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "readonly",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "resettable",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            }\n        ]\n    },\n    "StarTemplateContext": {\n        "fileName": "src/rating/rating.ts",\n        "className": "StarTemplateContext",\n        "description": "Context for the custom star display template",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "fill",\n                "type": "number",\n                "description": "Star fill percentage. An integer value between 0 and 100"\n            },\n            {\n                "name": "index",\n                "type": "number",\n                "description": "Index of the star."\n            }\n        ]\n    },\n    "NgbRating": {\n        "fileName": "src/rating/rating.ts",\n        "className": "NgbRating",\n        "description": "Rating directive that will take care of visualising a star rating bar.",\n        "type": "Component",\n        "selector": "ngb-rating",\n        "inputs": [\n            {\n                "name": "max",\n                "type": "number",\n                "description": "Maximal rating that can be given using this widget."\n            },\n            {\n                "name": "rate",\n                "type": "number",\n                "description": "Current rating. Can be a decimal value like 3.75"\n            },\n            {\n                "name": "readonly",\n                "type": "boolean",\n                "description": "A flag indicating if rating can be updated."\n            },\n            {\n                "name": "resettable",\n                "type": "boolean",\n                "description": "A flag indicating if rating can be reset to 0 on mouse click"\n            },\n            {\n                "name": "starTemplate",\n                "type": "TemplateRef<StarTemplateContext>",\n                "description": "A template to override star display.\\nAlternatively put a <ng-template> as the only child of <ngb-rating> element"\n            }\n        ],\n        "outputs": [\n            {\n                "name": "hover",\n                "description": "An event fired when a user is hovering over a given rating.\\nEvent\'s payload equals to the rating being hovered over."\n            },\n            {\n                "name": "leave",\n                "description": "An event fired when a user stops hovering over a given rating.\\nEvent\'s payload equals to the rating of the last item being hovered over."\n            },\n            {\n                "name": "rateChange",\n                "description": "An event fired when a user selects a new rating.\\nEvent\'s payload equals to the newly selected rating."\n            }\n        ],\n        "properties": [\n            {\n                "name": "contexts",\n                "type": "StarTemplateContext[]",\n                "description": ""\n            },\n            {\n                "name": "disabled",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nextRate",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "(_: any) => void",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "() => void",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzOptionComponent": {\n        "fileName": "src/select/nz-option.component.ts",\n        "className": "NzOptionComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-option",\n        "inputs": [\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzLabel",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzValue",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_label",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_value",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzLabel",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzOptionTemplate",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "nzValue",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzSelectComponent": {\n        "fileName": "src/select/nz-select.component.ts",\n        "className": "NzSelectComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-select",\n        "inputs": [\n            {\n                "name": "nzAllowClear",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzFilter",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzKeepUnListOptions",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzMaxMultiple",\n                "defaultValue": "Infinity",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzMode",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzMultiple",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzNotFoundContent",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzOpen",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzPlaceHolder",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzShowSearch",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzTags",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzOpenChange",\n                "description": ""\n            },\n            {\n                "name": "nzScrollToBottom",\n                "description": ""\n            },\n            {\n                "name": "nzSearchChange",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_activeFilterOption",\n                "type": "NzOptionComponent",\n                "description": ""\n            },\n            {\n                "name": "_cacheOptions",\n                "type": "NzOptionComponent[]",\n                "description": ""\n            },\n            {\n                "name": "_cdkOverlay",\n                "type": "CdkConnectedOverlay",\n                "description": ""\n            },\n            {\n                "name": "_classList",\n                "type": "string[]",\n                "description": ""\n            },\n            {\n                "name": "_composing",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_dropDownClassMap",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "_dropDownPosition",\n                "defaultValue": "bottom",\n                "type": "\\"top\\" | \\"bottom\\" | \\"center\\"",\n                "description": ""\n            },\n            {\n                "name": "_dropDownPrefixCls",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_filterOptions",\n                "type": "NzOptionComponent[]",\n                "description": ""\n            },\n            {\n                "name": "_isMultiInit",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_isOpen",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_mode",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "_notFoundContent",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_operatingMultipleOption",\n                "type": "NzOptionComponent",\n                "description": ""\n            },\n            {\n                "name": "_options",\n                "type": "NzOptionComponent[]",\n                "description": ""\n            },\n            {\n                "name": "_placeholder",\n                "defaultValue": "placeholder",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-select",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_searchText",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_selectedOption",\n                "type": "NzOptionComponent",\n                "description": ""\n            },\n            {\n                "name": "_selectedOptions",\n                "type": "Set<NzOptionComponent>",\n                "description": ""\n            },\n            {\n                "name": "_selectionClassMap",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "_selectionPrefixCls",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_size",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_tagsOptions",\n                "type": "NzOptionComponent[]",\n                "description": ""\n            },\n            {\n                "name": "_triggerWidth",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "_value",\n                "type": "string | string[]",\n                "description": ""\n            },\n            {\n                "name": "addOption",\n                "type": "(option: any) => void",\n                "description": "new nz-option insert or new tags insert "\n            },\n            {\n                "name": "dropdownUl",\n                "type": "ElementRef<any>",\n                "description": ""\n            },\n            {\n                "name": "nzAllowClear",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzKeepUnListOptions",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzMultiple",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzNotFoundContent",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzOpen",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzPlaceHolder",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzShowSearch",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzTags",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzValue",\n                "type": "string | string[]",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "(value: string | string[]) => void",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "() => void",\n                "description": ""\n            },\n            {\n                "name": "searchInputElementRef",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "trigger",\n                "type": "ElementRef<any>",\n                "description": ""\n            },\n            {\n                "name": "unSelectMultipleOption",\n                "type": "(option: any, $event?: any, emitChange?: boolean) => void",\n                "description": "cancel select multiple option "\n            }\n        ],\n        "methods": [\n            {\n                "name": "removeOption",\n                "description": "nz-option remove or tags remove ",\n                "args": [\n                    {\n                        "name": "option",\n                        "type": "NzOptionComponent"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "onPositionChange",\n                "description": "dropdown position changed ",\n                "args": [\n                    {\n                        "name": "position",\n                        "type": "ConnectedOverlayPositionChange"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "clearSelect",\n                "description": "clear single selected option ",\n                "args": [\n                    {\n                        "name": "$event",\n                        "type": "MouseEvent"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "clickOption",\n                "description": "click dropdown option by user ",\n                "args": [\n                    {\n                        "name": "option",\n                        "type": "NzOptionComponent"\n                    },\n                    {\n                        "name": "$event",\n                        "type": "MouseEvent"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "chooseOption",\n                "description": "choose option ",\n                "args": [\n                    {\n                        "name": "option",\n                        "type": "NzOptionComponent"\n                    },\n                    {\n                        "name": "isUserClick",\n                        "type": "boolean"\n                    },\n                    {\n                        "name": "$event",\n                        "type": "MouseEvent"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "isInSet",\n                "description": "determine if option in set ",\n                "args": [\n                    {\n                        "name": "set",\n                        "type": "Set<NzOptionComponent>"\n                    },\n                    {\n                        "name": "option",\n                        "type": "NzOptionComponent"\n                    }\n                ],\n                "returnType": "NzOptionComponent"\n            },\n            {\n                "name": "selectMultipleOption",\n                "description": "select multiple option ",\n                "args": [\n                    {\n                        "name": "option",\n                        "type": "NzOptionComponent"\n                    },\n                    {\n                        "name": "$event",\n                        "type": "MouseEvent"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "emitMultipleOptions",\n                "description": "emit multiple options ",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "updateSelectedOption",\n                "description": "update selected option when add remove option etc ",\n                "args": [\n                    {\n                        "name": "currentModelValue",\n                        "type": "string | string[]"\n                    },\n                    {\n                        "name": "triggerByNgModel",\n                        "type": "boolean"\n                    }\n                ],\n                "returnType": "void"\n            }\n        ]\n    },\n    "NzSliderHandleComponent": {\n        "fileName": "src/slider/nz-slider-handle.component.ts",\n        "className": "NzSliderHandleComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-slider-handle",\n        "inputs": [\n            {\n                "name": "nzActive",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzClassName",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzOffset",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzTipFormatter",\n                "type": "(value: number) => string",\n                "description": ""\n            },\n            {\n                "name": "nzValue",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzVertical",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "style",\n                "type": "object",\n                "description": ""\n            },\n            {\n                "name": "tooltipTitle",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzSliderMarksComponent": {\n        "fileName": "src/slider/nz-slider-marks.component.ts",\n        "className": "NzSliderMarksComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-slider-marks",\n        "inputs": [\n            {\n                "name": "nzClassName",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzIncluded",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzLowerBound",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzMarksArray",\n                "type": "MarksArray",\n                "description": ""\n            },\n            {\n                "name": "nzMax",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzMin",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzUpperBound",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzVertical",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "attrs",\n                "type": "{ id: number; value: number; offset: number; classes: { [key: string]: boolean; }; style: object;...",\n                "description": ""\n            },\n            {\n                "name": "nzIncluded",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzVertical",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzSliderStepComponent": {\n        "fileName": "src/slider/nz-slider-step.component.ts",\n        "className": "NzSliderStepComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-slider-step",\n        "inputs": [\n            {\n                "name": "nzIncluded",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzLowerBound",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzMarksArray",\n                "type": "MarksArray",\n                "description": ""\n            },\n            {\n                "name": "nzPrefixCls",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzUpperBound",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzVertical",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "attrs",\n                "type": "{ id: number; value: number; offset: number; classes: { [key: string]: boolean; }; style: object;...",\n                "description": ""\n            },\n            {\n                "name": "nzIncluded",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzVertical",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzSliderTrackComponent": {\n        "fileName": "src/slider/nz-slider-track.component.ts",\n        "className": "NzSliderTrackComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-slider-track",\n        "inputs": [\n            {\n                "name": "nzClassName",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "nzIncluded",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzLength",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "nzOffset",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "nzVertical",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "nzIncluded",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzVertical",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "style",\n                "type": "{ bottom?: string; height?: string; left?: string; width?: string; visibility?: string; }",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzSliderComponent": {\n        "fileName": "src/slider/nz-slider.component.ts",\n        "className": "NzSliderComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-slider",\n        "inputs": [\n            {\n                "name": "nzDebugId",\n                "type": "string | number",\n                "description": ""\n            },\n            {\n                "name": "nzDefaultValue",\n                "type": "SliderValue",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzDots",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzIncluded",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzMarks",\n                "type": "Marks",\n                "description": ""\n            },\n            {\n                "name": "nzMax",\n                "defaultValue": "100",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzMin",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzRange",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzStep",\n                "defaultValue": "1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzTipFormatter",\n                "type": "(value: number) => string",\n                "description": ""\n            },\n            {\n                "name": "nzVertical",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzOnAfterChange",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "activeValueIndex",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "bounds",\n                "type": "{ lower: any; upper: any; }",\n                "description": ""\n            },\n            {\n                "name": "cacheSliderLength",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "cacheSliderStart",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "classMap",\n                "type": "object",\n                "description": ""\n            },\n            {\n                "name": "dragend_",\n                "type": "Subscription",\n                "description": ""\n            },\n            {\n                "name": "dragend$",\n                "type": "Observable<number>",\n                "description": ""\n            },\n            {\n                "name": "dragmove_",\n                "type": "Subscription",\n                "description": ""\n            },\n            {\n                "name": "dragmove$",\n                "type": "Observable<number>",\n                "description": ""\n            },\n            {\n                "name": "dragstart_",\n                "type": "Subscription",\n                "description": ""\n            },\n            {\n                "name": "dragstart$",\n                "type": "Observable<number>",\n                "description": ""\n            },\n            {\n                "name": "handles",\n                "type": "SliderHandle[]",\n                "description": ""\n            },\n            {\n                "name": "isDragging",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "marksArray",\n                "type": "Marks[]",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzDots",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzIncluded",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzRange",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzVertical",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "onValueChange",\n                "type": "(value: SliderValue) => void",\n                "description": ""\n            },\n            {\n                "name": "prefixCls",\n                "defaultValue": "ant-slider",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "slider",\n                "type": "ElementRef<any>",\n                "description": ""\n            },\n            {\n                "name": "sliderDOM",\n                "type": "HTMLDivElement",\n                "description": ""\n            },\n            {\n                "name": "track",\n                "type": "{ offset: any; length: any; }",\n                "description": ""\n            },\n            {\n                "name": "value",\n                "type": "SliderValue",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzSliderService": {\n        "fileName": "src/slider/nz-slider.service.ts",\n        "className": "NzSliderService",\n        "description": "",\n        "type": "Service",\n        "methods": [\n            {\n                "name": "getElementOffset",\n                "description": "get the offset of an element relative to the document (Reference from jquery\'s offset())",\n                "args": [\n                    {\n                        "name": "elem",\n                        "type": "HTMLElement"\n                    }\n                ],\n                "returnType": "{ top: number; left: number; }"\n            }\n        ],\n        "properties": []\n    },\n    "NzSpinComponent": {\n        "fileName": "src/spin/nz-spin.component.ts",\n        "className": "NzSpinComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-spin",\n        "inputs": [\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzSpinning",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzTip",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_ref",\n                "type": "ElementRef<any>",\n                "description": ""\n            },\n            {\n                "name": "_size",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_tip",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "isNested",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzSpinning",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzTip",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzStepComponent": {\n        "fileName": "src/steps/nz-step.component.ts",\n        "className": "NzStepComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-step",\n        "inputs": [\n            {\n                "name": "nzDescription",\n                "type": "string | TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "nzStatus",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzTitle",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_current",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "_currentIndex",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "_description",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_descriptionTpl",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "_direction",\n                "defaultValue": "horizontal",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_el",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "_first",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_ifCustomStatus",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_last",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_outStatus",\n                "defaultValue": "process",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_processDot",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_status",\n                "defaultValue": "wait",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_stepsHead",\n                "type": "ElementRef<any>",\n                "description": ""\n            },\n            {\n                "name": "_stepsMain",\n                "type": "ElementRef<any>",\n                "description": ""\n            },\n            {\n                "name": "_stepsTail",\n                "type": "ElementRef<any>",\n                "description": ""\n            },\n            {\n                "name": "_totalCount",\n                "defaultValue": "1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "index",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzIcon",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "nzStatus",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "stepStatusClass",\n                "type": "any",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzStepsComponent": {\n        "fileName": "src/steps/nz-steps.component.ts",\n        "className": "NzStepsComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-steps",\n        "inputs": [\n            {\n                "name": "nzCurrent",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzDirection",\n                "type": "NzDirection",\n                "description": ""\n            },\n            {\n                "name": "nzProgressDot",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "\\"small\\" | \\"default\\"",\n                "description": ""\n            },\n            {\n                "name": "nzStatus",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_afterViewInit",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_current",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "_direction",\n                "defaultValue": "horizontal",\n                "type": "NzDirection",\n                "description": ""\n            },\n            {\n                "name": "_status",\n                "defaultValue": "process",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_stepsChanges",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "_stepsClassMap",\n                "type": "object",\n                "description": ""\n            },\n            {\n                "name": "nzCurrent",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzDirection",\n                "type": "NzDirection",\n                "description": ""\n            },\n            {\n                "name": "nzProgressDot",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzStatus",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "steps",\n                "type": "QueryList<NzStepComponent>",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzSwitchComponent": {\n        "fileName": "src/switch/nz-switch.component.ts",\n        "className": "NzSwitchComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-switch",\n        "inputs": [\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_checked",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_classMap",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "_innerPrefixCls",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-switch",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_size",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzDisabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "(value: boolean) => void",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "() => void",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzRowExpandIconComponent": {\n        "fileName": "src/table/nz-row-expand-icon.component.ts",\n        "className": "NzRowExpandIconComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-row-expand-icon",\n        "inputs": [\n            {\n                "name": "nzExpand",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowExpand",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzExpandChange",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "collapsed",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "expanded",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "hidden",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzExpand",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowExpand",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzRowIndentComponent": {\n        "fileName": "src/table/nz-row-indent.component.ts",\n        "className": "NzRowIndentComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-row-indent",\n        "inputs": [\n            {\n                "name": "nzIndentSize",\n                "type": "any",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "paddingLeft",\n                "type": "number",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzTableDividerDirective": {\n        "fileName": "src/table/nz-table-divider.directive.ts",\n        "className": "NzTableDividerDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-table-divider]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzTableFilterComponent": {\n        "fileName": "src/table/nz-table-filter.component.ts",\n        "className": "NzTableFilterComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "[nz-table-filter]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzTableSortComponent": {\n        "fileName": "src/table/nz-table-sort.component.ts",\n        "className": "NzTableSortComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-table-sort",\n        "inputs": [\n            {\n                "name": "nzValue",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzValueChange",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_value",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzTableComponent": {\n        "fileName": "src/table/nz-table.component.ts",\n        "className": "NzTableComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-table",\n        "inputs": [\n            {\n                "name": "nzAjaxData",\n                "type": "any[]",\n                "description": "async data "\n            },\n            {\n                "name": "nzBordered",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzCustomNoResult",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzDataSource",\n                "type": "any[]",\n                "description": "sync data "\n            },\n            {\n                "name": "nzIsPageIndexReset",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzIsPagination",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzLoading",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzPageIndex",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzPageSize",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzPageSizeSelectorValues",\n                "type": "number[]",\n                "description": "page size changer select values "\n            },\n            {\n                "name": "nzScroll",\n                "type": "{ x: number; y: number; }",\n                "description": ""\n            },\n            {\n                "name": "nzShowFooter",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowQuickJumper",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowSizeChanger",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowTitle",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowTotal",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzSize",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzTotal",\n                "type": "number",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzDataChange",\n                "description": ""\n            },\n            {\n                "name": "nzPageIndexChange",\n                "description": ""\n            },\n            {\n                "name": "nzPageIndexChangeClick",\n                "description": ""\n            },\n            {\n                "name": "nzPageSizeChange",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_current",\n                "defaultValue": "1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "_dataSet",\n                "type": "any[]",\n                "description": ""\n            },\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "_isAjax",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_isInit",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_pageSize",\n                "defaultValue": "10",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "_scroll",\n                "type": "{ x: number; y: number; }",\n                "description": ""\n            },\n            {\n                "name": "_total",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "data",\n                "type": "any[]",\n                "description": "public data for ngFor tr "\n            },\n            {\n                "name": "fixedHeader",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "nzAjaxData",\n                "type": "any[]",\n                "description": "async data "\n            },\n            {\n                "name": "nzBordered",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzCustomNoResult",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzDataSource",\n                "type": "any[]",\n                "description": "sync data "\n            },\n            {\n                "name": "nzIsPageIndexReset",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzIsPagination",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzLoading",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzPageIndex",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzPageSize",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "nzScroll",\n                "type": "{ x: number; y: number; }",\n                "description": ""\n            },\n            {\n                "name": "nzShowFooter",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowQuickJumper",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowSizeChanger",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowTitle",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzShowTotal",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzTotal",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "ths",\n                "type": "any[]",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzTbodyTrDirective": {\n        "fileName": "src/table/nz-tbody-tr.directive.ts",\n        "className": "NzTbodyTrDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-tbody-tr]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzTbodyDirective": {\n        "fileName": "src/table/nz-tbody.directive.ts",\n        "className": "NzTbodyDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-tbody]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NzTdDirective": {\n        "fileName": "src/table/nz-td.directive.ts",\n        "className": "NzTdDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-td]",\n        "inputs": [\n            {\n                "name": "nzCheckbox",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzExpand",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "nzCheckbox",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzExpand",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzThDirective": {\n        "fileName": "src/table/nz-th.directive.ts",\n        "className": "NzThDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-th]",\n        "inputs": [\n            {\n                "name": "nzCheckbox",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzExpand",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzWidth",\n                "type": "any",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_el",\n                "type": "HTMLElement",\n                "description": ""\n            },\n            {\n                "name": "nzCheckbox",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzExpand",\n                "type": "boolean",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzTheadDirective": {\n        "fileName": "src/table/nz-thead.directive.ts",\n        "className": "NzTheadDirective",\n        "description": "",\n        "type": "Directive",\n        "selector": "[nz-thead]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NgbTabsetConfig": {\n        "fileName": "src/tabset/tabset-config.ts",\n        "className": "NgbTabsetConfig",\n        "description": "Configuration service for the NgbTabset component.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the tabsets used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "justify",\n                "defaultValue": "start",\n                "type": "\\"center\\" | \\"start\\" | \\"end\\" | \\"fill\\" | \\"justified\\"",\n                "description": ""\n            },\n            {\n                "name": "orientation",\n                "defaultValue": "horizontal",\n                "type": "NzDirection",\n                "description": ""\n            },\n            {\n                "name": "type",\n                "defaultValue": "tabs",\n                "type": "\\"tabs\\" | \\"pills\\"",\n                "description": ""\n            }\n        ]\n    },\n    "NgbTabTitle": {\n        "fileName": "src/tabset/tabset.ts",\n        "className": "NgbTabTitle",\n        "description": "This directive should be used to wrap tab titles that need to contain HTML markup or other directives.",\n        "type": "Directive",\n        "selector": "ng-template[ngbTabTitle]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NgbTabContent": {\n        "fileName": "src/tabset/tabset.ts",\n        "className": "NgbTabContent",\n        "description": "This directive must be used to wrap content to be displayed in a tab.",\n        "type": "Directive",\n        "selector": "ng-template[ngbTabContent]",\n        "inputs": [],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NgbTab": {\n        "fileName": "src/tabset/tabset.ts",\n        "className": "NgbTab",\n        "description": "A directive representing an individual tab.",\n        "type": "Directive",\n        "selector": "ngb-tab",\n        "inputs": [\n            {\n                "name": "disabled",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": "Allows toggling disabled state of a given state. Disabled tabs can\'t be selected."\n            },\n            {\n                "name": "id",\n                "type": "string",\n                "description": "Unique tab identifier. Must be unique for the entire document for proper accessibility support."\n            },\n            {\n                "name": "title",\n                "type": "string",\n                "description": "Simple (string only) title. Use the \\"NgbTabTitle\\" directive for more complex use-cases."\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "contentTpl",\n                "type": "NgbTabContent",\n                "description": ""\n            },\n            {\n                "name": "titleTpl",\n                "type": "NgbTabTitle",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbTabChangeEvent": {\n        "fileName": "src/tabset/tabset.ts",\n        "className": "NgbTabChangeEvent",\n        "description": "The payload of the change event fired right before the tab change",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "activeId",\n                "type": "string",\n                "description": "Id of the currently active tab"\n            },\n            {\n                "name": "nextId",\n                "type": "string",\n                "description": "Id of the newly selected tab"\n            },\n            {\n                "name": "preventDefault",\n                "type": "() => void",\n                "description": "Function that will prevent tab switch if called"\n            }\n        ]\n    },\n    "NgbTabset": {\n        "fileName": "src/tabset/tabset.ts",\n        "className": "NgbTabset",\n        "description": "A component that makes it easy to create tabbed interface.",\n        "type": "Component",\n        "selector": "ngb-tabset",\n        "exportAs": "ngbTabset",\n        "inputs": [\n            {\n                "name": "activeId",\n                "type": "string",\n                "description": "An identifier of an initially selected (active) tab. Use the \\"select\\" method to switch a tab programmatically."\n            },\n            {\n                "name": "destroyOnHide",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": "Whether the closed tabs should be hidden without destroying them"\n            },\n            {\n                "name": "justify",\n                "type": "\\"center\\" | \\"start\\" | \\"end\\" | \\"fill\\" | \\"justified\\"",\n                "description": "The horizontal alignment of the nav with flexbox utilities. Can be one of \'start\', \'center\', \'end\', \'fill\' or\\n\'justified\'\\nThe default value is \'start\'."\n            },\n            {\n                "name": "orientation",\n                "type": "NzDirection",\n                "description": "The orientation of the nav (horizontal or vertical).\\nThe default value is \'horizontal\'."\n            },\n            {\n                "name": "type",\n                "type": "\\"tabs\\" | \\"pills\\"",\n                "description": "Type of navigation to be used for tabs. Can be one of \'tabs\' or \'pills\'."\n            }\n        ],\n        "outputs": [\n            {\n                "name": "tabChange",\n                "description": "A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details"\n            }\n        ],\n        "properties": [\n            {\n                "name": "justifyClass",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "tabs",\n                "type": "QueryList<NgbTab>",\n                "description": ""\n            }\n        ],\n        "methods": [\n            {\n                "name": "select",\n                "description": "Selects the tab with the given id and shows its associated pane.\\nAny other tab that was previously selected becomes unselected and its associated pane is hidden.",\n                "args": [\n                    {\n                        "name": "tabId",\n                        "type": "string"\n                    }\n                ],\n                "returnType": "void"\n            }\n        ]\n    },\n    "NzTimelineItemComponent": {\n        "fileName": "src/timeline/nz-timeline-item.component.ts",\n        "className": "NzTimelineItemComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-timeline-item",\n        "inputs": [\n            {\n                "name": "nzColor",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_color",\n                "defaultValue": "blue",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "_custom",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_customContent",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "_lastItem",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "itemHeadClass",\n                "type": "{ \'ant-timeline-item-head-blue\': boolean; }",\n                "description": ""\n            },\n            {\n                "name": "nzColor",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzTimelineComponent": {\n        "fileName": "src/timeline/nz-timeline.component.ts",\n        "className": "NzTimelineComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-timeline",\n        "inputs": [],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "_isPending",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "_listOfTimeline",\n                "type": "QueryList<NzTimelineItemComponent>",\n                "description": ""\n            },\n            {\n                "name": "_pendingContent",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "items",\n                "type": "NzTimelineItemComponent[]",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbTimeStruct": {\n        "fileName": "src/timepicker/ngb-time-struct.ts",\n        "className": "NgbTimeStruct",\n        "description": "Interface of the model of the NgbTimepicker directive",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "hour",\n                "type": "number",\n                "description": "The hour, going from 0 to 23"\n            },\n            {\n                "name": "minute",\n                "type": "number",\n                "description": "The minute, going from 0 to 59"\n            },\n            {\n                "name": "second",\n                "type": "number",\n                "description": "The second, going from 0 to 59"\n            }\n        ]\n    },\n    "NgbTimepickerConfig": {\n        "fileName": "src/timepicker/timepicker-config.ts",\n        "className": "NgbTimepickerConfig",\n        "description": "Configuration service for the NgbTimepicker component.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the timepickers used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "disabled",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "hourStep",\n                "defaultValue": "1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "meridian",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "minuteStep",\n                "defaultValue": "1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "readonlyInputs",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "seconds",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "secondStep",\n                "defaultValue": "1",\n                "type": "number",\n                "description": ""\n            },\n            {\n                "name": "size",\n                "defaultValue": "medium",\n                "type": "\\"small\\" | \\"large\\" | \\"medium\\"",\n                "description": ""\n            },\n            {\n                "name": "spinners",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            }\n        ]\n    },\n    "NgbTimepicker": {\n        "fileName": "src/timepicker/timepicker.ts",\n        "className": "NgbTimepicker",\n        "description": "A lightweight & configurable timepicker directive.",\n        "type": "Component",\n        "selector": "ngb-timepicker",\n        "inputs": [\n            {\n                "name": "hourStep",\n                "type": "number",\n                "description": "Number of hours to increase or decrease when using a button."\n            },\n            {\n                "name": "meridian",\n                "type": "boolean",\n                "description": "Whether to display 12H or 24H mode."\n            },\n            {\n                "name": "minuteStep",\n                "type": "number",\n                "description": "Number of minutes to increase or decrease when using a button."\n            },\n            {\n                "name": "readonlyInputs",\n                "type": "boolean",\n                "description": "To make timepicker readonly"\n            },\n            {\n                "name": "seconds",\n                "type": "boolean",\n                "description": "Whether to display seconds input."\n            },\n            {\n                "name": "secondStep",\n                "type": "number",\n                "description": "Number of seconds to increase or decrease when using a button."\n            },\n            {\n                "name": "size",\n                "type": "\\"small\\" | \\"large\\" | \\"medium\\"",\n                "description": "To set the size of the inputs and button"\n            },\n            {\n                "name": "spinners",\n                "type": "boolean",\n                "description": "Whether to display the spinners above and below the inputs."\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "disabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "model",\n                "type": "NgbTime",\n                "description": ""\n            },\n            {\n                "name": "onChange",\n                "type": "(_: any) => void",\n                "description": ""\n            },\n            {\n                "name": "onTouched",\n                "type": "() => void",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbTooltipConfig": {\n        "fileName": "src/tooltip/tooltip-config.ts",\n        "className": "NgbTooltipConfig",\n        "description": "Configuration service for the NgbTooltip directive.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the tooltips used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "container",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "placement",\n                "defaultValue": "top",\n                "type": "PlacementArray",\n                "description": ""\n            },\n            {\n                "name": "triggers",\n                "defaultValue": "hover",\n                "type": "string",\n                "description": ""\n            }\n        ]\n    },\n    "NgbTooltipWindow": {\n        "fileName": "src/tooltip/tooltip.ts",\n        "className": "NgbTooltipWindow",\n        "description": "",\n        "type": "Component",\n        "selector": "ngb-tooltip-window",\n        "inputs": [\n            {\n                "name": "id",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "placement",\n                "defaultValue": "top",\n                "type": "Placement",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [],\n        "methods": []\n    },\n    "NgbTooltip": {\n        "fileName": "src/tooltip/tooltip.ts",\n        "className": "NgbTooltip",\n        "description": "A lightweight, extensible directive for fancy tooltip creation.",\n        "type": "Directive",\n        "selector": "[ngbTooltip]",\n        "exportAs": "ngbTooltip",\n        "inputs": [\n            {\n                "name": "container",\n                "type": "string",\n                "description": "A selector specifying the element the tooltip should be appended to.\\nCurrently only supports \\"body\\"."\n            },\n            {\n                "name": "ngbTooltip",\n                "type": "string | TemplateRef<any>",\n                "description": "Content to be displayed as tooltip. If falsy, the tooltip won\'t open."\n            },\n            {\n                "name": "placement",\n                "type": "PlacementArray",\n                "description": "Placement of a popover accepts:\\n    \\"top\\", \\"top-left\\", \\"top-right\\", \\"bottom\\", \\"bottom-left\\", \\"bottom-right\\",\\n    \\"left\\", \\"left-top\\", \\"left-bottom\\", \\"right\\", \\"right-top\\", \\"right-bottom\\"\\nand array of above values."\n            },\n            {\n                "name": "triggers",\n                "type": "string",\n                "description": "Specifies events that should trigger. Supports a space separated list of event names."\n            }\n        ],\n        "outputs": [\n            {\n                "name": "hidden",\n                "description": "Emits an event when the tooltip is hidden"\n            },\n            {\n                "name": "shown",\n                "description": "Emits an event when the tooltip is shown"\n            }\n        ],\n        "properties": [\n            {\n                "name": "ngbTooltip",\n                "type": "string | TemplateRef<any>",\n                "description": "Content to be displayed as tooltip. If falsy, the tooltip won\'t open."\n            }\n        ],\n        "methods": [\n            {\n                "name": "open",\n                "description": "Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.\\nThe context is an optional value to be injected into the tooltip template when it is created.",\n                "args": [\n                    {\n                        "name": "context",\n                        "type": "any"\n                    }\n                ],\n                "returnType": "void"\n            },\n            {\n                "name": "close",\n                "description": "Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "toggle",\n                "description": "Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "isOpen",\n                "description": "Returns whether or not the tooltip is currently being shown",\n                "args": [],\n                "returnType": "boolean"\n            }\n        ]\n    },\n    "NzTransferListComponent": {\n        "fileName": "src/transfer/nz-transfer-list.component.ts",\n        "className": "NzTransferListComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-transfer-list",\n        "inputs": [\n            {\n                "name": "dataSource",\n                "type": "TransferItem[]",\n                "description": ""\n            },\n            {\n                "name": "direction",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "filter",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "filterOption",\n                "type": "(inputValue: string, item: TransferItem) => boolean",\n                "description": ""\n            },\n            {\n                "name": "footer",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "itemsUnit",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "itemUnit",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "notFoundContent",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "render",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "searchPlaceholder",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "showSearch",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "titleText",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "filterChange",\n                "description": ""\n            },\n            {\n                "name": "handleSelect",\n                "description": ""\n            },\n            {\n                "name": "handleSelectAll",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "_classList",\n                "type": "string[]",\n                "description": ""\n            },\n            {\n                "name": "_listDiffer",\n                "type": "IterableDiffer<{}>",\n                "description": ""\n            },\n            {\n                "name": "_prefixCls",\n                "defaultValue": "ant-transfer-list",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "showSearch",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "stat",\n                "type": "{ checkAll: boolean; checkHalf: boolean; checkCount: number; shownCount: number; }",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NzTransferSearchComponent": {\n        "fileName": "src/transfer/nz-transfer-search.component.ts",\n        "className": "NzTransferSearchComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-transfer-search",\n        "inputs": [\n            {\n                "name": "placeholder",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "value",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "valueChanged",\n                "description": ""\n            },\n            {\n                "name": "valueClear",\n                "description": ""\n            }\n        ],\n        "properties": [],\n        "methods": []\n    },\n    "TransferChange": {\n        "fileName": "src/transfer/nz-transfer.component.ts",\n        "className": "TransferChange",\n        "description": "",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "from",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "list",\n                "type": "TransferItem[]",\n                "description": ""\n            },\n            {\n                "name": "to",\n                "type": "string",\n                "description": ""\n            }\n        ]\n    },\n    "TransferSearchChange": {\n        "fileName": "src/transfer/nz-transfer.component.ts",\n        "className": "TransferSearchChange",\n        "description": "",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "direction",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "value",\n                "type": "string",\n                "description": ""\n            }\n        ]\n    },\n    "TransferSelectChange": {\n        "fileName": "src/transfer/nz-transfer.component.ts",\n        "className": "TransferSelectChange",\n        "description": "",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "checked",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "direction",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "item",\n                "type": "TransferItem",\n                "description": ""\n            },\n            {\n                "name": "list",\n                "type": "TransferItem[]",\n                "description": ""\n            }\n        ]\n    },\n    "NzTransferComponent": {\n        "fileName": "src/transfer/nz-transfer.component.ts",\n        "className": "NzTransferComponent",\n        "description": "",\n        "type": "Component",\n        "selector": "nz-transfer",\n        "inputs": [\n            {\n                "name": "canMove",\n                "type": "(arg: TransferCanMove) => Observable<TransferItem[]>",\n                "description": ""\n            },\n            {\n                "name": "nzDataSource",\n                "type": "TransferItem[]",\n                "description": ""\n            },\n            {\n                "name": "nzFilterOption",\n                "type": "(inputValue: string, item: TransferItem) => boolean",\n                "description": ""\n            },\n            {\n                "name": "nzItemsUnit",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzItemUnit",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzListStyle",\n                "type": "object",\n                "description": ""\n            },\n            {\n                "name": "nzNotFoundContent",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzOperations",\n                "type": "string[]",\n                "description": ""\n            },\n            {\n                "name": "nzSearchPlaceholder",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "nzShowSearch",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "nzTitles",\n                "type": "string[]",\n                "description": ""\n            }\n        ],\n        "outputs": [\n            {\n                "name": "nzChange",\n                "description": ""\n            },\n            {\n                "name": "nzSearchChange",\n                "description": ""\n            },\n            {\n                "name": "nzSelectChange",\n                "description": ""\n            }\n        ],\n        "properties": [\n            {\n                "name": "footer",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "handleLeftSelect",\n                "type": "(item: TransferItem) => void",\n                "description": ""\n            },\n            {\n                "name": "handleLeftSelectAll",\n                "type": "(checked: boolean) => void",\n                "description": ""\n            },\n            {\n                "name": "handleRightSelect",\n                "type": "(item: TransferItem) => void",\n                "description": ""\n            },\n            {\n                "name": "handleRightSelectAll",\n                "type": "(checked: boolean) => void",\n                "description": ""\n            },\n            {\n                "name": "leftActive",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "leftDataSource",\n                "type": "TransferItem[]",\n                "description": ""\n            },\n            {\n                "name": "leftFilter",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "moveToLeft",\n                "type": "() => void",\n                "description": ""\n            },\n            {\n                "name": "moveToRight",\n                "type": "() => void",\n                "description": ""\n            },\n            {\n                "name": "nzShowSearch",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "render",\n                "type": "TemplateRef<void>",\n                "description": ""\n            },\n            {\n                "name": "rightActive",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "rightDataSource",\n                "type": "TransferItem[]",\n                "description": ""\n            },\n            {\n                "name": "rightFilter",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "TransferCanMove": {\n        "fileName": "src/transfer/transfer-can-move.ts",\n        "className": "TransferCanMove",\n        "description": "",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "direction",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "list",\n                "type": "TransferItem[]",\n                "description": ""\n            }\n        ]\n    },\n    "TransferItem": {\n        "fileName": "src/transfer/transfer-item.ts",\n        "className": "TransferItem",\n        "description": "",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "_hiden",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "checked",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "direction",\n                "type": "\\"left\\" | \\"right\\"",\n                "description": ""\n            },\n            {\n                "name": "disabled",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "title",\n                "type": "string",\n                "description": ""\n            }\n        ]\n    },\n    "NgbHighlight": {\n        "fileName": "src/typeahead/highlight.ts",\n        "className": "NgbHighlight",\n        "description": "",\n        "type": "Component",\n        "selector": "ngb-highlight",\n        "inputs": [\n            {\n                "name": "highlightClass",\n                "defaultValue": "ngb-highlight",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "result",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "term",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "outputs": [],\n        "properties": [\n            {\n                "name": "parts",\n                "type": "string[]",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbTypeaheadConfig": {\n        "fileName": "src/typeahead/typeahead-config.ts",\n        "className": "NgbTypeaheadConfig",\n        "description": "Configuration service for the NgbTypeahead component.\\nYou can inject this service, typically in your root component, and customize the values of its properties in\\norder to provide default values for all the typeaheads used in the application.",\n        "type": "Service",\n        "methods": [],\n        "properties": [\n            {\n                "name": "container",\n                "type": "any",\n                "description": ""\n            },\n            {\n                "name": "editable",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "focusFirst",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": ""\n            },\n            {\n                "name": "placement",\n                "defaultValue": "bottom-left",\n                "type": "PlacementArray",\n                "description": ""\n            },\n            {\n                "name": "showHint",\n                "defaultValue": "false",\n                "type": "boolean",\n                "description": ""\n            }\n        ]\n    },\n    "ResultTemplateContext": {\n        "fileName": "src/typeahead/typeahead-window.ts",\n        "className": "ResultTemplateContext",\n        "description": "Context for the typeahead result template in case you want to override the default one",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "result",\n                "type": "any",\n                "description": "Your typeahead result data model"\n            },\n            {\n                "name": "term",\n                "type": "string",\n                "description": "Search term from the input used to get current result"\n            }\n        ]\n    },\n    "NgbTypeaheadWindow": {\n        "fileName": "src/typeahead/typeahead-window.ts",\n        "className": "NgbTypeaheadWindow",\n        "description": "",\n        "type": "Component",\n        "selector": "ngb-typeahead-window",\n        "exportAs": "ngbTypeaheadWindow",\n        "inputs": [\n            {\n                "name": "focusFirst",\n                "defaultValue": "true",\n                "type": "boolean",\n                "description": "Flag indicating if the first row should be active initially"\n            },\n            {\n                "name": "formatter",\n                "defaultValue": "toString",\n                "type": "(value: any) => string",\n                "description": "A function used to format a given result before display. This function should return a formatted string without\\nany HTML markup"\n            },\n            {\n                "name": "id",\n                "type": "string",\n                "description": "The id for the typeahead widnow. The id should be unique and the same\\nas the associated typeahead\'s id."\n            },\n            {\n                "name": "results",\n                "type": "any",\n                "description": "Typeahead match results to be displayed"\n            },\n            {\n                "name": "resultTemplate",\n                "type": "TemplateRef<ResultTemplateContext>",\n                "description": "A template to override a matching result default display"\n            },\n            {\n                "name": "term",\n                "type": "string",\n                "description": "Search term used to get current results"\n            }\n        ],\n        "outputs": [\n            {\n                "name": "activeChange",\n                "description": ""\n            },\n            {\n                "name": "select",\n                "description": "Event raised when user selects a particular result row"\n            }\n        ],\n        "properties": [\n            {\n                "name": "activeIdx",\n                "defaultValue": "0",\n                "type": "number",\n                "description": ""\n            }\n        ],\n        "methods": []\n    },\n    "NgbTypeaheadSelectItemEvent": {\n        "fileName": "src/typeahead/typeahead.ts",\n        "className": "NgbTypeaheadSelectItemEvent",\n        "description": "Payload of the selectItem event.",\n        "type": "Interface",\n        "methods": [],\n        "properties": [\n            {\n                "name": "item",\n                "type": "any",\n                "description": "An item about to be selected"\n            },\n            {\n                "name": "preventDefault",\n                "type": "() => void",\n                "description": "Function that will prevent item selection if called"\n            }\n        ]\n    },\n    "NgbTypeahead": {\n        "fileName": "src/typeahead/typeahead.ts",\n        "className": "NgbTypeahead",\n        "description": "NgbTypeahead directive provides a simple way of creating powerful typeaheads from any text input",\n        "type": "Directive",\n        "selector": "input[ngbTypeahead]",\n        "exportAs": "ngbTypeahead",\n        "inputs": [\n            {\n                "name": "container",\n                "type": "string",\n                "description": "A selector specifying the element the tooltip should be appended to.\\nCurrently only supports \\"body\\"."\n            },\n            {\n                "name": "editable",\n                "type": "boolean",\n                "description": "A flag indicating if model values should be restricted to the ones selected from the popup only."\n            },\n            {\n                "name": "focusFirst",\n                "type": "boolean",\n                "description": "A flag indicating if the first match should automatically be focused as you type."\n            },\n            {\n                "name": "inputFormatter",\n                "type": "(value: any) => string",\n                "description": "A function to convert a given value into string to display in the input field"\n            },\n            {\n                "name": "ngbTypeahead",\n                "type": "(text: Observable<string>) => Observable<any[]>",\n                "description": "A function to transform the provided observable text into the array of results.  Note that the \\"this\\" argument\\nis undefined so you need to explicitly bind it to a desired \\"this\\" target."\n            },\n            {\n                "name": "placement",\n                "defaultValue": "bottom-left",\n                "type": "PlacementArray",\n                "description": "Placement of a typeahead accepts:\\n    \\"top\\", \\"top-left\\", \\"top-right\\", \\"bottom\\", \\"bottom-left\\", \\"bottom-right\\",\\n    \\"left\\", \\"left-top\\", \\"left-bottom\\", \\"right\\", \\"right-top\\", \\"right-bottom\\"\\nand array of above values."\n            },\n            {\n                "name": "resultFormatter",\n                "type": "(value: any) => string",\n                "description": "A function to format a given result before display. This function should return a formatted string without any\\nHTML markup"\n            },\n            {\n                "name": "resultTemplate",\n                "type": "TemplateRef<ResultTemplateContext>",\n                "description": "A template to override a matching result default display"\n            },\n            {\n                "name": "showHint",\n                "type": "boolean",\n                "description": "Show hint when an option in the result list matches."\n            }\n        ],\n        "outputs": [\n            {\n                "name": "selectItem",\n                "description": "An event emitted when a match is selected. Event payload is of type NgbTypeaheadSelectItemEvent."\n            }\n        ],\n        "properties": [\n            {\n                "name": "activeDescendant",\n                "type": "string",\n                "description": ""\n            },\n            {\n                "name": "popupId",\n                "type": "string",\n                "description": ""\n            }\n        ],\n        "methods": [\n            {\n                "name": "dismissPopup",\n                "description": "Dismisses typeahead popup window",\n                "args": [],\n                "returnType": "void"\n            },\n            {\n                "name": "isPopupOpen",\n                "description": "Returns true if the typeahead popup window is displayed",\n                "args": [],\n                "returnType": "void"\n            }\n        ]\n    }\n};\n/* harmony default export */ __webpack_exports__["a"] = (API_DOCS);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/src/api-docs.ts\n')},"./demo/src/app/components/shared/api-docs/api-docs-badge.component.ngfactory.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RenderType_NgbdApiDocsBadge; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return View_NgbdApiDocsBadge_0; });\n/* unused harmony export View_NgbdApiDocsBadge_Host_0 */\n/* unused harmony export NgbdApiDocsBadgeNgFactory */\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/@angular/core/fesm5/core.js");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/@angular/common/fesm5/common.js");\n/* harmony import */ var _api_docs_badge_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./demo/src/app/components/shared/api-docs/api-docs-badge.component.ts");\n/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \n\n\n\nvar styles_NgbdApiDocsBadge = [];\nvar RenderType_NgbdApiDocsBadge = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵcrt */ "zb"]({ encapsulation: 2, styles: styles_NgbdApiDocsBadge, data: {} });\n\nfunction View_NgbdApiDocsBadge_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](2, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 3, "h5", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](1, 0, null, null, 2, "span", [["class", "badge"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](2, 278528, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_1__[/* NgClass */ "j"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* IterableDiffers */ "y"], _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* KeyValueDiffers */ "z"], _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ElementRef */ "n"], _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Renderer2 */ "O"]], { klass: [0, "klass"], ngClass: [1, "ngClass"] }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵted */ "Tb"](3, null, ["", ""]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = "badge"; var currVal_1 = _co.badgeClass; _ck(_v, 2, 0, currVal_0, currVal_1); }, function (_ck, _v) { var _co = _v.component; var currVal_2 = _co.text; _ck(_v, 3, 0, currVal_2); }); }\nfunction View_NgbdApiDocsBadge_Host_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 1, "ngbd-api-docs-badge", [], null, null, null, View_NgbdApiDocsBadge_0, RenderType_NgbdApiDocsBadge)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](1, 49152, null, 0, _api_docs_badge_component__WEBPACK_IMPORTED_MODULE_2__[/* NgbdApiDocsBadge */ "a"], [], null, null)], null, null); }\nvar NgbdApiDocsBadgeNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵccf */ "xb"]("ngbd-api-docs-badge", _api_docs_badge_component__WEBPACK_IMPORTED_MODULE_2__[/* NgbdApiDocsBadge */ "a"], View_NgbdApiDocsBadge_Host_0, { type: "type" }, {}, []);\n\n//# sourceMappingURL=api-docs-badge.component.ngfactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9hcHAvY29tcG9uZW50cy9zaGFyZWQvYXBpLWRvY3MvYXBpLWRvY3MtYmFkZ2UuY29tcG9uZW50Lm5nZmFjdG9yeS5qcz80YThmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtGQUEyQyw0REFBNEQsRUFBRTtBQUNqRztBQUNSLHNDQUE2Qyx5d0JBQXdULCtDQUErQyx3SEFBb0Usd0JBQXdCLHlCQUF5QixnQ0FBZ0MscUNBQXFDLEVBQUUsc0JBQXNCLHdCQUF3QiwwQkFBMEIsMEJBQTBCLEVBQUUsRUFBRTtBQUN0ckIsMkNBQWtELHdjQUE2TztBQUMvUixzT0FBbUgsZUFBZSxJQUFJO0FBQzlIO0FBQ1IiLCJmaWxlIjoiLi9kZW1vL3NyYy9hcHAvY29tcG9uZW50cy9zaGFyZWQvYXBpLWRvY3MvYXBpLWRvY3MtYmFkZ2UuY29tcG9uZW50Lm5nZmFjdG9yeS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBUaGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSB0aGUgQW5ndWxhciB0ZW1wbGF0ZSBjb21waWxlci4gRG8gbm90IGVkaXQuXG4gKlxuICogQHN1cHByZXNzIHtzdXNwaWNpb3VzQ29kZSx1c2VsZXNzQ29kZSxtaXNzaW5nUHJvcGVydGllcyxtaXNzaW5nT3ZlcnJpZGUsY2hlY2tUeXBlc31cbiAqIHRzbGludDpkaXNhYmxlXG4gKi8gXG5pbXBvcnQgKiBhcyBpMCBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0ICogYXMgaTEgZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0ICogYXMgaTIgZnJvbSBcIi4vYXBpLWRvY3MtYmFkZ2UuY29tcG9uZW50XCI7XG52YXIgc3R5bGVzX05nYmRBcGlEb2NzQmFkZ2UgPSBbXTtcbnZhciBSZW5kZXJUeXBlX05nYmRBcGlEb2NzQmFkZ2UgPSBpMC7JtWNydCh7IGVuY2Fwc3VsYXRpb246IDIsIHN0eWxlczogc3R5bGVzX05nYmRBcGlEb2NzQmFkZ2UsIGRhdGE6IHt9IH0pO1xuZXhwb3J0IHsgUmVuZGVyVHlwZV9OZ2JkQXBpRG9jc0JhZGdlIGFzIFJlbmRlclR5cGVfTmdiZEFwaURvY3NCYWRnZSB9O1xuZXhwb3J0IGZ1bmN0aW9uIFZpZXdfTmdiZEFwaURvY3NCYWRnZV8wKF9sKSB7IHJldHVybiBpMC7JtXZpZCgyLCBbKF9sKCkoKSwgaTAuybVlbGQoMCwgMCwgbnVsbCwgbnVsbCwgMywgXCJoNVwiLCBbXSwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCkpLCAoX2woKSgpLCBpMC7JtWVsZCgxLCAwLCBudWxsLCBudWxsLCAyLCBcInNwYW5cIiwgW1tcImNsYXNzXCIsIFwiYmFkZ2VcIl1dLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsKSksIGkwLsm1ZGlkKDIsIDI3ODUyOCwgbnVsbCwgMCwgaTEuTmdDbGFzcywgW2kwLkl0ZXJhYmxlRGlmZmVycywgaTAuS2V5VmFsdWVEaWZmZXJzLCBpMC5FbGVtZW50UmVmLCBpMC5SZW5kZXJlcjJdLCB7IGtsYXNzOiBbMCwgXCJrbGFzc1wiXSwgbmdDbGFzczogWzEsIFwibmdDbGFzc1wiXSB9LCBudWxsKSwgKF9sKCkoKSwgaTAuybV0ZWQoMywgbnVsbCwgW1wiXCIsIFwiXCJdKSldLCBmdW5jdGlvbiAoX2NrLCBfdikgeyB2YXIgX2NvID0gX3YuY29tcG9uZW50OyB2YXIgY3VyclZhbF8wID0gXCJiYWRnZVwiOyB2YXIgY3VyclZhbF8xID0gX2NvLmJhZGdlQ2xhc3M7IF9jayhfdiwgMiwgMCwgY3VyclZhbF8wLCBjdXJyVmFsXzEpOyB9LCBmdW5jdGlvbiAoX2NrLCBfdikgeyB2YXIgX2NvID0gX3YuY29tcG9uZW50OyB2YXIgY3VyclZhbF8yID0gX2NvLnRleHQ7IF9jayhfdiwgMywgMCwgY3VyclZhbF8yKTsgfSk7IH1cbmV4cG9ydCBmdW5jdGlvbiBWaWV3X05nYmRBcGlEb2NzQmFkZ2VfSG9zdF8wKF9sKSB7IHJldHVybiBpMC7JtXZpZCgwLCBbKF9sKCkoKSwgaTAuybVlbGQoMCwgMCwgbnVsbCwgbnVsbCwgMSwgXCJuZ2JkLWFwaS1kb2NzLWJhZGdlXCIsIFtdLCBudWxsLCBudWxsLCBudWxsLCBWaWV3X05nYmRBcGlEb2NzQmFkZ2VfMCwgUmVuZGVyVHlwZV9OZ2JkQXBpRG9jc0JhZGdlKSksIGkwLsm1ZGlkKDEsIDQ5MTUyLCBudWxsLCAwLCBpMi5OZ2JkQXBpRG9jc0JhZGdlLCBbXSwgbnVsbCwgbnVsbCldLCBudWxsLCBudWxsKTsgfVxudmFyIE5nYmRBcGlEb2NzQmFkZ2VOZ0ZhY3RvcnkgPSBpMC7JtWNjZihcIm5nYmQtYXBpLWRvY3MtYmFkZ2VcIiwgaTIuTmdiZEFwaURvY3NCYWRnZSwgVmlld19OZ2JkQXBpRG9jc0JhZGdlX0hvc3RfMCwgeyB0eXBlOiBcInR5cGVcIiB9LCB7fSwgW10pO1xuZXhwb3J0IHsgTmdiZEFwaURvY3NCYWRnZU5nRmFjdG9yeSBhcyBOZ2JkQXBpRG9jc0JhZGdlTmdGYWN0b3J5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGktZG9jcy1iYWRnZS5jb21wb25lbnQubmdmYWN0b3J5LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./demo/src/app/components/shared/api-docs/api-docs-badge.component.ngfactory.js\n')},"./demo/src/app/components/shared/api-docs/api-docs-badge.component.ts":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return NgbdApiDocsBadge; });\nvar BADGES = {\n    'Directive': 'success',\n    'Component': 'success',\n    'Service': 'primary',\n    'Configuration': 'primary',\n    'Class': 'danger',\n    'Interface': 'danger'\n};\nvar NgbdApiDocsBadge = /** @class */ (function () {\n    function NgbdApiDocsBadge() {\n    }\n    Object.defineProperty(NgbdApiDocsBadge.prototype, \"type\", {\n        set: function (type) {\n            this.text = type;\n            this.badgeClass = \"badge-\" + (BADGES[type] || 'secondary');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NgbdApiDocsBadge;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9hcHAvY29tcG9uZW50cy9zaGFyZWQvYXBpLWRvY3MvYXBpLWRvY3MtYmFkZ2UuY29tcG9uZW50LnRzPzE1ZmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7QUFBQSxJQUFNLE1BQU0sR0FBRztJQUNiLFdBQVcsRUFBRSxTQUFTO0lBQ3RCLFdBQVcsRUFBRSxTQUFTO0lBQ3RCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLGVBQWUsRUFBRSxTQUFTO0lBQzFCLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLFdBQVcsRUFBRSxRQUFRO0NBQ3RCLENBQUM7QUFFRjtJQUFBO0lBZUEsQ0FBQztJQUxDLHNCQUNJLGtDQUFJO2FBRFIsVUFDUyxJQUFZO1lBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUcsWUFBUyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFFLENBQUM7UUFDM0QsQ0FBQzs7O09BQUE7SUFDSCx1QkFBQztBQUFELENBQUMiLCJmaWxlIjoiLi9kZW1vL3NyYy9hcHAvY29tcG9uZW50cy9zaGFyZWQvYXBpLWRvY3MvYXBpLWRvY3MtYmFkZ2UuY29tcG9uZW50LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IEJBREdFUyA9IHtcbiAgJ0RpcmVjdGl2ZSc6ICdzdWNjZXNzJyxcbiAgJ0NvbXBvbmVudCc6ICdzdWNjZXNzJyxcbiAgJ1NlcnZpY2UnOiAncHJpbWFyeScsXG4gICdDb25maWd1cmF0aW9uJzogJ3ByaW1hcnknLFxuICAnQ2xhc3MnOiAnZGFuZ2VyJyxcbiAgJ0ludGVyZmFjZSc6ICdkYW5nZXInXG59O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2JkLWFwaS1kb2NzLWJhZGdlJyxcbiAgdGVtcGxhdGU6IGA8aDU+PHNwYW4gY2xhc3M9XCJiYWRnZVwiIFtuZ0NsYXNzXT1cImJhZGdlQ2xhc3NcIj57e3RleHR9fTwvc3Bhbj48L2g1PmAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE5nYmRBcGlEb2NzQmFkZ2Uge1xuXG4gIGJhZGdlQ2xhc3M7XG4gIHRleHQ7XG5cbiAgQElucHV0KClcbiAgc2V0IHR5cGUodHlwZTogc3RyaW5nKSB7XG4gICAgdGhpcy50ZXh0ID0gdHlwZTtcbiAgICB0aGlzLmJhZGdlQ2xhc3MgPSBgYmFkZ2UtJHtCQURHRVNbdHlwZV0gfHwgJ3NlY29uZGFyeSd9YDtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./demo/src/app/components/shared/api-docs/api-docs-badge.component.ts\n")},"./demo/src/app/components/shared/api-docs/api-docs.model.ts":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return signature; });\nfunction signature(method) {\n    var args = method[\'args\'].map(function (arg) { return arg.name + ": " + arg.type; }).join(\', \');\n    return method.name + "(" + args + ")";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9hcHAvY29tcG9uZW50cy9zaGFyZWQvYXBpLWRvY3MvYXBpLWRvY3MubW9kZWwudHM/NDMzYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBdUNNLG1CQUFvQixNQUFrQjtJQUMxQyxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQUcsSUFBSSxPQUFHLEdBQUcsQ0FBQyxJQUFJLFVBQUssR0FBRyxDQUFDLElBQU0sRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5RSxNQUFNLENBQUksTUFBTSxDQUFDLElBQUksU0FBSSxJQUFJLE1BQUcsQ0FBQztBQUNuQyxDQUFDIiwiZmlsZSI6Ii4vZGVtby9zcmMvYXBwL2NvbXBvbmVudHMvc2hhcmVkL2FwaS1kb2NzL2FwaS1kb2NzLm1vZGVsLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBDbGFzc0Rlc2Mge1xuICB0eXBlOiBzdHJpbmc7XG4gIGZpbGVOYW1lOiBzdHJpbmc7XG4gIGNsYXNzTmFtZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBwcm9wZXJ0aWVzOiBQcm9wZXJ0eURlc2NbXTtcbiAgbWV0aG9kczogTWV0aG9kRGVzY1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERpcmVjdGl2ZURlc2MgZXh0ZW5kcyBDbGFzc0Rlc2Mge1xuICBzZWxlY3Rvcjogc3RyaW5nO1xuICBleHBvcnRBcz86IHN0cmluZztcbiAgaW5wdXRzOiBJbnB1dERlc2NbXTtcbiAgb3V0cHV0czogT3V0cHV0RGVzY1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BlcnR5RGVzYyB7XG4gIG5hbWU6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBkZWZhdWx0VmFsdWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0aG9kRGVzYyB7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgYXJnczogQXJndW1lbnREZXNjW107XG4gIHJldHVyblR5cGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcmd1bWVudERlc2Mge1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnB1dERlc2MgZXh0ZW5kcyBQcm9wZXJ0eURlc2Mge31cblxuZXhwb3J0IGludGVyZmFjZSBPdXRwdXREZXNjIGV4dGVuZHMgUHJvcGVydHlEZXNjIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBzaWduYXR1cmUobWV0aG9kOiBNZXRob2REZXNjKTogc3RyaW5nIHtcbiAgY29uc3QgYXJncyA9IG1ldGhvZFsnYXJncyddLm1hcChhcmcgPT4gYCR7YXJnLm5hbWV9OiAke2FyZy50eXBlfWApLmpvaW4oJywgJyk7XG4gIHJldHVybiBgJHttZXRob2QubmFtZX0oJHthcmdzfSlgO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./demo/src/app/components/shared/api-docs/api-docs.model.ts\n')},"./demo/src/app/components/shared/example-box/example-box.component.ngfactory.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RenderType_ExampleBoxComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return View_ExampleBoxComponent_0; });\n/* unused harmony export View_ExampleBoxComponent_Host_0 */\n/* unused harmony export ExampleBoxComponentNgFactory */\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/@angular/core/fesm5/core.js");\n/* harmony import */ var _src_tabset_tabset_ngfactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/tabset/tabset.ngfactory.js");\n/* harmony import */ var _src_tabset_tabset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/tabset/tabset.ts");\n/* harmony import */ var _src_tabset_tabset_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/tabset/tabset-config.ts");\n/* harmony import */ var _example_box_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./demo/src/app/components/shared/example-box/example-box.component.ts");\n/* harmony import */ var _shared_analytics_analytics__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./demo/src/app/shared/analytics/analytics.ts");\n/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \n\n\n\n\n\n\nvar styles_ExampleBoxComponent = [];\nvar RenderType_ExampleBoxComponent = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵcrt */ "zb"]({ encapsulation: 2, styles: styles_ExampleBoxComponent, data: {} });\n\nfunction View_ExampleBoxComponent_1(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 1, "small", [["class", "badge badge-secondary"], ["title", "HTML template"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵted */ "Tb"](-1, null, ["T"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](2, 0, null, null, 1, "span", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵted */ "Tb"](3, null, ["", "-", ".html"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.component; var currVal_1 = _co.demo; _ck(_v, 3, 0, currVal_0, currVal_1); }); }\nfunction View_ExampleBoxComponent_2(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 1, "pre", [["class", "language-html"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](1, 0, null, null, 0, "code", [["class", "language-html"]], [[8, "innerHTML", 1]], null, null, null, null))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.snippets[_co.demo]["markup"]; _ck(_v, 1, 0, currVal_0); }); }\nfunction View_ExampleBoxComponent_3(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 1, "small", [["class", "badge badge-info"], ["title", "Component class"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵted */ "Tb"](-1, null, ["C"])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](2, 0, null, null, 1, "span", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵted */ "Tb"](3, null, ["", "-", ".ts"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.component; var currVal_1 = _co.demo; _ck(_v, 3, 0, currVal_0, currVal_1); }); }\nfunction View_ExampleBoxComponent_4(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 1, "pre", [["class", "language-typescript"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](1, 0, null, null, 0, "code", [["class", "language-typescript"]], [[8, "innerHTML", 1]], null, null, null, null))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.snippets[_co.demo]["code"]; _ck(_v, 1, 0, currVal_0); }); }\nfunction View_ExampleBoxComponent_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 26, "div", [["class", "component-demo"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](1, 0, null, null, 3, "h2", [], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵted */ "Tb"](2, null, [" ", " "])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](3, 0, null, null, 1, "a", [["class", "plunker"], ["target", "_blank"], ["title", "Edit in Plunker"]], [[8, "href", 4]], null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](4, 0, null, null, 0, "img", [["alt", "Plunker icon"], ["height", "24"], ["src", "img/plunker-icon.png"], ["width", "24"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](5, 0, null, null, 21, "div", [["class", "card"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](6, 0, null, null, 1, "div", [["class", "card-body"]], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵncd */ "Kb"](null, 0), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](8, 0, null, null, 18, "ngb-tabset", [["class", "tabset-code"]], null, null, null, _src_tabset_tabset_ngfactory__WEBPACK_IMPORTED_MODULE_1__[/* View_NgbTabset_0 */ "b"], _src_tabset_tabset_ngfactory__WEBPACK_IMPORTED_MODULE_1__[/* RenderType_NgbTabset */ "a"])), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](9, 2146304, null, 1, _src_tabset_tabset__WEBPACK_IMPORTED_MODULE_2__[/* NgbTabset */ "d"], [_src_tabset_tabset_config__WEBPACK_IMPORTED_MODULE_3__[/* NgbTabsetConfig */ "a"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵqud */ "Rb"](603979776, 1, { tabs: 1 }), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](11, 0, null, null, 7, "ngb-tab", [], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](12, 16384, [[1, 4]], 2, _src_tabset_tabset__WEBPACK_IMPORTED_MODULE_2__[/* NgbTab */ "a"], [], { id: [0, "id"] }, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵqud */ "Rb"](335544320, 2, { contentTpl: 0 }), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵqud */ "Rb"](335544320, 3, { titleTpl: 0 }), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](0, null, null, 1, null, View_ExampleBoxComponent_1)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](16, 16384, [[3, 4]], 0, _src_tabset_tabset__WEBPACK_IMPORTED_MODULE_2__[/* NgbTabTitle */ "c"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* TemplateRef */ "X"]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](0, null, null, 1, null, View_ExampleBoxComponent_2)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](18, 16384, [[2, 4]], 0, _src_tabset_tabset__WEBPACK_IMPORTED_MODULE_2__[/* NgbTabContent */ "b"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* TemplateRef */ "X"]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](19, 0, null, null, 7, "ngb-tab", [], null, null, null, null, null)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](20, 16384, [[1, 4]], 2, _src_tabset_tabset__WEBPACK_IMPORTED_MODULE_2__[/* NgbTab */ "a"], [], { id: [0, "id"] }, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵqud */ "Rb"](335544320, 4, { contentTpl: 0 }), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵqud */ "Rb"](335544320, 5, { titleTpl: 0 }), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](0, null, null, 1, null, View_ExampleBoxComponent_3)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](24, 16384, [[5, 4]], 0, _src_tabset_tabset__WEBPACK_IMPORTED_MODULE_2__[/* NgbTabTitle */ "c"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* TemplateRef */ "X"]], null, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](0, null, null, 1, null, View_ExampleBoxComponent_4)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](26, 16384, [[4, 4]], 0, _src_tabset_tabset__WEBPACK_IMPORTED_MODULE_2__[/* NgbTabContent */ "b"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* TemplateRef */ "X"]], null, null)], function (_ck, _v) { var _co = _v.component; var currVal_2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵinlineInterpolate */ "Db"](2, "", _co.component, "-", _co.demo, "-html"); _ck(_v, 12, 0, currVal_2); var currVal_3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵinlineInterpolate */ "Db"](2, "", _co.component, "-", _co.demo, "-typescript"); _ck(_v, 20, 0, currVal_3); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.demoTitle; _ck(_v, 2, 0, currVal_0); var currVal_1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵinlineInterpolate */ "Db"](2, "app/components/", _co.component, "/demos/", _co.demo, "/plnkr.html"); _ck(_v, 3, 0, currVal_1); }); }\nfunction View_ExampleBoxComponent_Host_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 1, "ngbd-example-box", [], null, null, null, View_ExampleBoxComponent_0, RenderType_ExampleBoxComponent)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](1, 49152, null, 0, _example_box_component__WEBPACK_IMPORTED_MODULE_4__[/* ExampleBoxComponent */ "a"], [_shared_analytics_analytics__WEBPACK_IMPORTED_MODULE_5__[/* Analytics */ "a"]], null, null)], null, null); }\nvar ExampleBoxComponentNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵccf */ "xb"]("ngbd-example-box", _example_box_component__WEBPACK_IMPORTED_MODULE_4__[/* ExampleBoxComponent */ "a"], View_ExampleBoxComponent_Host_0, { demoTitle: "demoTitle", component: "component", demo: "demo", snippets: "snippets" }, {}, ["*"]);\n\n//# sourceMappingURL=example-box.component.ngfactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/src/app/components/shared/example-box/example-box.component.ngfactory.js\n')},"./demo/src/app/components/shared/example-box/example-box.component.ts":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ExampleBoxComponent; });\n/* harmony import */ var _shared_analytics_analytics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./demo/src/app/shared/analytics/analytics.ts");\n\nvar ExampleBoxComponent = /** @class */ (function () {\n    function ExampleBoxComponent(_analytics) {\n        this._analytics = _analytics;\n    }\n    return ExampleBoxComponent;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9hcHAvY29tcG9uZW50cy9zaGFyZWQvZXhhbXBsZS1ib3gvZXhhbXBsZS1ib3guY29tcG9uZW50LnRzP2MyZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDOEQ7QUFFOUQ7SUFVRSw2QkFBb0IsVUFBcUI7UUFBckIsZUFBVSxHQUFWLFVBQVUsQ0FBVztJQUFHLENBQUM7SUFDL0MsMEJBQUM7QUFBRCxDQUFDIiwiZmlsZSI6Ii4vZGVtby9zcmMvYXBwL2NvbXBvbmVudHMvc2hhcmVkL2V4YW1wbGUtYm94L2V4YW1wbGUtYm94LmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QW5hbHl0aWNzfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvYW5hbHl0aWNzL2FuYWx5dGljcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nYmQtZXhhbXBsZS1ib3gnLFxuICB0ZW1wbGF0ZVVybDogJy4vZXhhbXBsZS1ib3guY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEV4YW1wbGVCb3hDb21wb25lbnQge1xuICBASW5wdXQoKSBkZW1vVGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgY29tcG9uZW50OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGRlbW86IHN0cmluZztcbiAgQElucHV0KCkgc25pcHBldHM6IE9iamVjdDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9hbmFseXRpY3M6IEFuYWx5dGljcykge31cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./demo/src/app/components/shared/example-box/example-box.component.ts\n')},"./demo/src/app/components/shared/fragment/fragment.directive.ts":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NgbdFragment; });\nvar NgbdFragment = /** @class */ (function () {\n    function NgbdFragment() {\n    }\n    return NgbdFragment;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9hcHAvY29tcG9uZW50cy9zaGFyZWQvZnJhZ21lbnQvZnJhZ21lbnQuZGlyZWN0aXZlLnRzP2U3NmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7QUFBQTtJQUFBO0lBU0EsQ0FBQztJQUFELG1CQUFDO0FBQUQsQ0FBQyIsImZpbGUiOiIuL2RlbW8vc3JjL2FwcC9jb21wb25lbnRzL3NoYXJlZC9mcmFnbWVudC9mcmFnbWVudC5kaXJlY3RpdmUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2FbbmdiZEZyYWdtZW50XScsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLnRpdGxlLWZyYWdtZW50XSc6ICd0cnVlJyxcbiAgICAnW2F0dHIuaWRdJzogJ2ZyYWdtZW50J1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE5nYmRGcmFnbWVudCB7XG4gIEBJbnB1dCgpIGZyYWdtZW50OiBzdHJpbmc7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./demo/src/app/components/shared/fragment/fragment.directive.ts\n')},"./demo/src/app/components/shared/index.ts":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NgbdComponentsSharedModule; });\nvar NgbdComponentsSharedModule = /** @class */ (function () {\n    function NgbdComponentsSharedModule() {\n    }\n    return NgbdComponentsSharedModule;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9hcHAvY29tcG9uZW50cy9zaGFyZWQvaW5kZXgudHM/MTQ1ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFVQTtBQUFBO0lBQUE7SUFLeUMsQ0FBQztJQUFELGlDQUFDO0FBQUQsQ0FBQyIsImZpbGUiOiIuL2RlbW8vc3JjL2FwcC9jb21wb25lbnRzL3NoYXJlZC9pbmRleC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge05nYmRTaGFyZWRNb2R1bGV9IGZyb20gJy4uLy4uL3NoYXJlZCc7XG5pbXBvcnQge0V4YW1wbGVCb3hDb21wb25lbnR9IGZyb20gJy4vZXhhbXBsZS1ib3gvZXhhbXBsZS1ib3guY29tcG9uZW50JztcbmltcG9ydCB7TmdiZEFwaURvY3N9IGZyb20gJy4vYXBpLWRvY3MvYXBpLWRvY3MuY29tcG9uZW50JztcbmltcG9ydCB7TmdiZEFwaURvY3NCYWRnZX0gZnJvbSAnLi9hcGktZG9jcy9hcGktZG9jcy1iYWRnZS5jb21wb25lbnQnO1xuaW1wb3J0IHtOZ2JkQXBpRG9jc0NsYXNzfSBmcm9tICcuL2FwaS1kb2NzL2FwaS1kb2NzLWNsYXNzLmNvbXBvbmVudCc7XG5pbXBvcnQge05nYmRBcGlEb2NzQ29uZmlnfSBmcm9tICcuL2FwaS1kb2NzL2FwaS1kb2NzLWNvbmZpZy5jb21wb25lbnQnO1xuaW1wb3J0IHtOZ2JkRnJhZ21lbnR9IGZyb20gJy4vZnJhZ21lbnQvZnJhZ21lbnQuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW05nYmRTaGFyZWRNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtFeGFtcGxlQm94Q29tcG9uZW50LCBOZ2JkQXBpRG9jc0JhZGdlLCBOZ2JkQXBpRG9jcywgTmdiZEFwaURvY3NDbGFzcywgTmdiZEFwaURvY3NDb25maWcsIE5nYmRGcmFnbWVudF0sXG4gIGV4cG9ydHM6IFtFeGFtcGxlQm94Q29tcG9uZW50LCBOZ2JkQXBpRG9jc0JhZGdlLCBOZ2JkQXBpRG9jcywgTmdiZEFwaURvY3NDbGFzcywgTmdiZEFwaURvY3NDb25maWcsIE5nYmRGcmFnbWVudF1cbn0pXG5leHBvcnQgY2xhc3MgTmdiZENvbXBvbmVudHNTaGFyZWRNb2R1bGUge31cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./demo/src/app/components/shared/index.ts\n')},"./demo/src/app/shared/component-wrapper/component-wrapper.component.ngfactory.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@angular/core/fesm5/core.js\nvar core = __webpack_require__("./node_modules/@angular/core/fesm5/core.js");\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/fesm5/common.js\nvar common = __webpack_require__("./node_modules/@angular/common/fesm5/common.js");\n\n// EXTERNAL MODULE: ./node_modules/@angular/router/fesm5/router.js\nvar router = __webpack_require__("./node_modules/@angular/router/fesm5/router.js");\n\n// EXTERNAL MODULE: ./demo/src/app/shared/side-nav/side-nav.component.ts\nvar side_nav_component = __webpack_require__("./demo/src/app/shared/side-nav/side-nav.component.ts");\n\n// CONCATENATED MODULE: ./demo/src/app/shared/side-nav/side-nav.component.ngfactory.js\n/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \n\n\n\n\nvar styles_SideNavComponent = [];\nvar RenderType_SideNavComponent = core["zb" /* ɵcrt */]({ encapsulation: 2, styles: styles_SideNavComponent, data: {} });\n\nfunction View_SideNavComponent_2(_l) { return core["Vb" /* ɵvid */](0, [(_l()(), core["Bb" /* ɵeld */](0, 0, null, null, 5, "li", [], [[2, "active", null]], null, null, null, null)), core["Mb" /* ɵpad */](1, 3), (_l()(), core["Bb" /* ɵeld */](2, 0, null, null, 3, "a", [], [[1, "target", 0], [8, "href", 4]], [[null, "click"]], function (_v, en, $event) { var ad = true; if (("click" === en)) {\n        var pd_0 = (core["Lb" /* ɵnov */](_v, 3).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), core["Ab" /* ɵdid */](3, 671744, null, 0, router["n" /* RouterLinkWithHref */], [router["l" /* Router */], router["a" /* ActivatedRoute */], common["i" /* LocationStrategy */]], { routerLink: [0, "routerLink"] }, null), core["Mb" /* ɵpad */](4, 3), (_l()(), core["Tb" /* ɵted */](5, null, ["", ""]))], function (_ck, _v) { var _co = _v.component; var currVal_3 = _ck(_v, 4, 0, "/components", _v.context.$implicit.href, _co.activeTab); _ck(_v, 3, 0, currVal_3); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.isActive(_ck(_v, 1, 0, "/components", _v.context.$implicit.href, _co.activeTab)); _ck(_v, 0, 0, currVal_0); var currVal_1 = core["Lb" /* ɵnov */](_v, 3).target; var currVal_2 = core["Lb" /* ɵnov */](_v, 3).href; _ck(_v, 2, 0, currVal_1, currVal_2); var currVal_4 = _v.context.$implicit.title; _ck(_v, 5, 0, currVal_4); }); }\nfunction View_SideNavComponent_1(_l) { return core["Vb" /* ɵvid */](0, [(_l()(), core["Bb" /* ɵeld */](0, 0, null, null, 9, "nav", [], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](1, 0, null, null, 8, "div", [["class", "bd-toc-item"]], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](2, 0, null, null, 4, "a", [["class", "bd-toc-link"]], [[1, "target", 0], [8, "href", 4]], [[null, "click"]], function (_v, en, $event) { var ad = true; if (("click" === en)) {\n        var pd_0 = (core["Lb" /* ɵnov */](_v, 3).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), core["Ab" /* ɵdid */](3, 671744, null, 0, router["n" /* RouterLinkWithHref */], [router["l" /* Router */], router["a" /* ActivatedRoute */], common["i" /* LocationStrategy */]], { routerLink: [0, "routerLink"] }, null), core["Mb" /* ɵpad */](4, 1), (_l()(), core["Bb" /* ɵeld */](5, 0, null, null, 1, "h4", [], null, null, null, null, null)), (_l()(), core["Tb" /* ɵted */](-1, null, ["Components"])), (_l()(), core["Bb" /* ɵeld */](7, 0, null, null, 2, "ul", [["class", "nav flex-column"]], null, null, null, null, null)), (_l()(), core["sb" /* ɵand */](16777216, null, null, 1, null, View_SideNavComponent_2)), core["Ab" /* ɵdid */](9, 802816, null, 0, common["k" /* NgForOf */], [core["ab" /* ViewContainerRef */], core["X" /* TemplateRef */], core["y" /* IterableDiffers */]], { ngForOf: [0, "ngForOf"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_2 = _ck(_v, 4, 0, "/components"); _ck(_v, 3, 0, currVal_2); var currVal_3 = _co.components; _ck(_v, 9, 0, currVal_3); }, function (_ck, _v) { var currVal_0 = core["Lb" /* ɵnov */](_v, 3).target; var currVal_1 = core["Lb" /* ɵnov */](_v, 3).href; _ck(_v, 2, 0, currVal_0, currVal_1); }); }\nfunction View_SideNavComponent_4(_l) { return core["Vb" /* ɵvid */](0, [(_l()(), core["Bb" /* ɵeld */](0, 0, null, null, 5, "li", [], [[2, "active", null]], null, null, null, null)), core["Mb" /* ɵpad */](1, 3), (_l()(), core["Bb" /* ɵeld */](2, 0, null, null, 3, "a", [], [[1, "target", 0], [8, "href", 4]], [[null, "click"]], function (_v, en, $event) { var ad = true; if (("click" === en)) {\n        var pd_0 = (core["Lb" /* ɵnov */](_v, 3).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), core["Ab" /* ɵdid */](3, 671744, null, 0, router["n" /* RouterLinkWithHref */], [router["l" /* Router */], router["a" /* ActivatedRoute */], common["i" /* LocationStrategy */]], { routerLink: [0, "routerLink"] }, null), core["Mb" /* ɵpad */](4, 3), (_l()(), core["Tb" /* ɵted */](5, null, ["", ""]))], function (_ck, _v) { var _co = _v.component; var currVal_3 = _ck(_v, 4, 0, "/components", _v.context.$implicit.toLowerCase(), _co.activeTab); _ck(_v, 3, 0, currVal_3); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.isActive(_ck(_v, 1, 0, "/components", _v.context.$implicit.toLowerCase(), _co.activeTab)); _ck(_v, 0, 0, currVal_0); var currVal_1 = core["Lb" /* ɵnov */](_v, 3).target; var currVal_2 = core["Lb" /* ɵnov */](_v, 3).href; _ck(_v, 2, 0, currVal_1, currVal_2); var currVal_4 = _v.context.$implicit; _ck(_v, 5, 0, currVal_4); }); }\nfunction View_SideNavComponent_3(_l) { return core["Vb" /* ɵvid */](0, [(_l()(), core["Bb" /* ɵeld */](0, 0, null, null, 9, "nav", [], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](1, 0, null, null, 8, "div", [["class", "bd-toc-item"]], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](2, 0, null, null, 4, "a", [["class", "bd-toc-link"]], [[1, "target", 0], [8, "href", 4]], [[null, "click"]], function (_v, en, $event) { var ad = true; if (("click" === en)) {\n        var pd_0 = (core["Lb" /* ɵnov */](_v, 3).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), core["Ab" /* ɵdid */](3, 671744, null, 0, router["n" /* RouterLinkWithHref */], [router["l" /* Router */], router["a" /* ActivatedRoute */], common["i" /* LocationStrategy */]], { routerLink: [0, "routerLink"] }, null), core["Mb" /* ɵpad */](4, 1), (_l()(), core["Bb" /* ɵeld */](5, 0, null, null, 1, "h4", [], null, null, null, null, null)), (_l()(), core["Tb" /* ɵted */](-1, null, ["Directives"])), (_l()(), core["Bb" /* ɵeld */](7, 0, null, null, 2, "ul", [["class", "nav flex-column"]], null, null, null, null, null)), (_l()(), core["sb" /* ɵand */](16777216, null, null, 1, null, View_SideNavComponent_4)), core["Ab" /* ɵdid */](9, 802816, null, 0, common["k" /* NgForOf */], [core["ab" /* ViewContainerRef */], core["X" /* TemplateRef */], core["y" /* IterableDiffers */]], { ngForOf: [0, "ngForOf"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_2 = _ck(_v, 4, 0, "/components"); _ck(_v, 3, 0, currVal_2); var currVal_3 = _co.directives; _ck(_v, 9, 0, currVal_3); }, function (_ck, _v) { var currVal_0 = core["Lb" /* ɵnov */](_v, 3).target; var currVal_1 = core["Lb" /* ɵnov */](_v, 3).href; _ck(_v, 2, 0, currVal_0, currVal_1); }); }\nfunction View_SideNavComponent_0(_l) { return core["Vb" /* ɵvid */](0, [(_l()(), core["Bb" /* ɵeld */](0, 0, null, null, 4, "div", [["class", "bd-sidebar"]], null, null, null, null, null)), (_l()(), core["sb" /* ɵand */](16777216, null, null, 1, null, View_SideNavComponent_1)), core["Ab" /* ɵdid */](2, 16384, null, 0, common["l" /* NgIf */], [core["ab" /* ViewContainerRef */], core["X" /* TemplateRef */]], { ngIf: [0, "ngIf"] }, null), (_l()(), core["sb" /* ɵand */](16777216, null, null, 1, null, View_SideNavComponent_3)), core["Ab" /* ɵdid */](4, 16384, null, 0, common["l" /* NgIf */], [core["ab" /* ViewContainerRef */], core["X" /* TemplateRef */]], { ngIf: [0, "ngIf"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = !_co.showDirective; _ck(_v, 2, 0, currVal_0); var currVal_1 = _co.showDirective; _ck(_v, 4, 0, currVal_1); }, null); }\nfunction View_SideNavComponent_Host_0(_l) { return core["Vb" /* ɵvid */](0, [(_l()(), core["Bb" /* ɵeld */](0, 0, null, null, 1, "ngbd-side-nav", [], null, null, null, View_SideNavComponent_0, RenderType_SideNavComponent)), core["Ab" /* ɵdid */](1, 49152, null, 0, side_nav_component["a" /* SideNavComponent */], [router["l" /* Router */]], null, null)], null, null); }\nvar SideNavComponentNgFactory = core["xb" /* ɵccf */]("ngbd-side-nav", side_nav_component["a" /* SideNavComponent */], View_SideNavComponent_Host_0, { showDirective: "showDirective", activeTab: "activeTab" }, {}, []);\n\n//# sourceMappingURL=side-nav.component.ngfactory.js.map\n// EXTERNAL MODULE: ./src/tabset/tabset.ngfactory.js\nvar tabset_ngfactory = __webpack_require__("./src/tabset/tabset.ngfactory.js");\n\n// EXTERNAL MODULE: ./src/tabset/tabset.ts\nvar tabset = __webpack_require__("./src/tabset/tabset.ts");\n\n// EXTERNAL MODULE: ./src/tabset/tabset-config.ts\nvar tabset_config = __webpack_require__("./src/tabset/tabset-config.ts");\n\n// EXTERNAL MODULE: ./demo/src/app/shared/component-wrapper/component-wrapper.component.ts\nvar component_wrapper_component = __webpack_require__("./demo/src/app/shared/component-wrapper/component-wrapper.component.ts");\n\n// CONCATENATED MODULE: ./demo/src/app/shared/component-wrapper/component-wrapper.component.ngfactory.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RenderType_ComponentWrapper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return View_ComponentWrapper_0; });\n/* unused harmony export View_ComponentWrapper_Host_0 */\n/* unused harmony export ComponentWrapperNgFactory */\n/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \n\n\n\n\n\n\n\n\n\nvar styles_ComponentWrapper = [];\nvar RenderType_ComponentWrapper = core["zb" /* ɵcrt */]({ encapsulation: 2, styles: styles_ComponentWrapper, data: {} });\n\nfunction View_ComponentWrapper_3(_l) { return core["Vb" /* ɵvid */](0, [(_l()(), core["Bb" /* ɵeld */](0, 0, null, null, 1, null, null, null, null, null, null, null)), (_l()(), core["Tb" /* ɵted */](-1, null, ["\\u00A0"]))], null, null); }\nfunction View_ComponentWrapper_2(_l) { return core["Vb" /* ɵvid */](0, [(_l()(), core["Bb" /* ɵeld */](0, 0, null, null, 5, null, null, null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](1, 0, null, null, 1, "small", [], [[8, "className", 0]], null, null, null, null)), (_l()(), core["Tb" /* ɵted */](2, null, ["", ""])), (_l()(), core["Tb" /* ɵted */](3, null, [" ", " "])), (_l()(), core["sb" /* ɵand */](16777216, null, null, 1, null, View_ComponentWrapper_3)), core["Ab" /* ɵdid */](5, 16384, null, 0, common["l" /* NgIf */], [core["ab" /* ViewContainerRef */], core["X" /* TemplateRef */]], { ngIf: [0, "ngIf"] }, null), (_l()(), core["sb" /* ɵand */](0, null, null, 0))], function (_ck, _v) { var currVal_3 = !_v.context.last; _ck(_v, 5, 0, currVal_3); }, function (_ck, _v) { var currVal_0 = core["Db" /* ɵinlineInterpolate */](1, "badge ", _v.context.$implicit[2], ""); _ck(_v, 1, 0, currVal_0); var currVal_1 = _v.context.$implicit[0]; _ck(_v, 2, 0, currVal_1); var currVal_2 = _v.context.$implicit[1]; _ck(_v, 3, 0, currVal_2); }); }\nfunction View_ComponentWrapper_1(_l) { return core["Vb" /* ɵvid */](0, [core["Kb" /* ɵncd */](null, 0), (_l()(), core["Bb" /* ɵeld */](1, 0, null, null, 5, "div", [["class", "examples-legend"]], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](2, 0, null, null, 4, "div", [["style", "float:right;margin-top:20px"]], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](3, 0, null, null, 1, "strong", [], null, null, null, null, null)), (_l()(), core["Tb" /* ɵted */](-1, null, ["Legend"])), (_l()(), core["sb" /* ɵand */](16777216, null, null, 1, null, View_ComponentWrapper_2)), core["Ab" /* ɵdid */](6, 802816, null, 0, common["k" /* NgForOf */], [core["ab" /* ViewContainerRef */], core["X" /* TemplateRef */], core["y" /* IterableDiffers */]], { ngForOf: [0, "ngForOf"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.fileTypes; _ck(_v, 6, 0, currVal_0); }, null); }\nfunction View_ComponentWrapper_4(_l) { return core["Vb" /* ɵvid */](0, [core["Kb" /* ɵncd */](null, 1), core["Kb" /* ɵncd */](null, 2), core["Kb" /* ɵncd */](null, 3), (_l()(), core["sb" /* ɵand */](0, null, null, 0))], null, null); }\nfunction View_ComponentWrapper_0(_l) { return core["Vb" /* ɵvid */](0, [(_l()(), core["Bb" /* ɵeld */](0, 0, null, null, 3, "div", [["class", "jumbotron"]], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](1, 0, null, null, 2, "div", [["class", "container"]], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](2, 0, null, null, 1, "h1", [], null, null, null, null, null)), (_l()(), core["Tb" /* ɵted */](3, null, ["", ""])), (_l()(), core["Bb" /* ɵeld */](4, 0, null, null, 23, "div", [["class", "container-fluid"]], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](5, 0, null, null, 22, "div", [["class", "row"]], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](6, 0, null, null, 2, "div", [["class", "col-12 col-lg-2 d-none d-lg-block"]], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](7, 0, null, null, 1, "ngbd-side-nav", [], null, null, null, View_SideNavComponent_0, RenderType_SideNavComponent)), core["Ab" /* ɵdid */](8, 49152, null, 0, side_nav_component["a" /* SideNavComponent */], [router["l" /* Router */]], { showDirective: [0, "showDirective"], activeTab: [1, "activeTab"] }, null), (_l()(), core["Bb" /* ɵeld */](9, 0, null, null, 15, "div", [["class", "col-12 col-lg-8"]], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](10, 0, null, null, 14, "ngb-tabset", [["class", "root-nav"]], null, [[null, "tabChange"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if (("tabChange" === en)) {\n        var pd_0 = (_co.tabChange($event) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, tabset_ngfactory["b" /* View_NgbTabset_0 */], tabset_ngfactory["a" /* RenderType_NgbTabset */])), core["Ab" /* ɵdid */](11, 2146304, null, 1, tabset["d" /* NgbTabset */], [tabset_config["a" /* NgbTabsetConfig */]], { activeId: [0, "activeId"] }, { tabChange: "tabChange" }), core["Rb" /* ɵqud */](603979776, 1, { tabs: 1 }), (_l()(), core["Bb" /* ɵeld */](13, 0, null, null, 5, "ngb-tab", [["id", "examples"], ["title", "Examples"]], null, null, null, null, null)), core["Ab" /* ɵdid */](14, 16384, [[1, 4]], 2, tabset["a" /* NgbTab */], [], { id: [0, "id"], title: [1, "title"] }, null), core["Rb" /* ɵqud */](335544320, 2, { contentTpl: 0 }), core["Rb" /* ɵqud */](335544320, 3, { titleTpl: 0 }), (_l()(), core["sb" /* ɵand */](0, null, null, 1, null, View_ComponentWrapper_1)), core["Ab" /* ɵdid */](18, 16384, [[2, 4]], 0, tabset["b" /* NgbTabContent */], [core["X" /* TemplateRef */]], null, null), (_l()(), core["Bb" /* ɵeld */](19, 0, null, null, 5, "ngb-tab", [["id", "api"], ["title", "API"]], null, null, null, null, null)), core["Ab" /* ɵdid */](20, 16384, [[1, 4]], 2, tabset["a" /* NgbTab */], [], { id: [0, "id"], title: [1, "title"] }, null), core["Rb" /* ɵqud */](335544320, 4, { contentTpl: 0 }), core["Rb" /* ɵqud */](335544320, 5, { titleTpl: 0 }), (_l()(), core["sb" /* ɵand */](0, null, null, 1, null, View_ComponentWrapper_4)), core["Ab" /* ɵdid */](24, 16384, [[4, 4]], 0, tabset["b" /* NgbTabContent */], [core["X" /* TemplateRef */]], null, null), (_l()(), core["Bb" /* ɵeld */](25, 0, null, null, 2, "div", [["class", "col-12 col-lg-2 d-none d-lg-block"]], null, null, null, null, null)), (_l()(), core["Bb" /* ɵeld */](26, 0, null, null, 1, "ngbd-side-nav", [], null, null, null, View_SideNavComponent_0, RenderType_SideNavComponent)), core["Ab" /* ɵdid */](27, 49152, null, 0, side_nav_component["a" /* SideNavComponent */], [router["l" /* Router */]], { showDirective: [0, "showDirective"], activeTab: [1, "activeTab"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_1 = false; var currVal_2 = _co.activeTab; _ck(_v, 8, 0, currVal_1, currVal_2); var currVal_3 = _co.activeTab; _ck(_v, 11, 0, currVal_3); var currVal_4 = "examples"; var currVal_5 = "Examples"; _ck(_v, 14, 0, currVal_4, currVal_5); var currVal_6 = "api"; var currVal_7 = "API"; _ck(_v, 20, 0, currVal_6, currVal_7); var currVal_8 = true; var currVal_9 = _co.activeTab; _ck(_v, 27, 0, currVal_8, currVal_9); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.component; _ck(_v, 3, 0, currVal_0); }); }\nfunction View_ComponentWrapper_Host_0(_l) { return core["Vb" /* ɵvid */](0, [(_l()(), core["Bb" /* ɵeld */](0, 0, null, null, 1, "ngbd-component-wrapper", [], null, null, null, View_ComponentWrapper_0, RenderType_ComponentWrapper)), core["Ab" /* ɵdid */](1, 49152, null, 0, component_wrapper_component["a" /* ComponentWrapper */], [router["a" /* ActivatedRoute */], router["l" /* Router */]], null, null)], null, null); }\nvar ComponentWrapperNgFactory = core["xb" /* ɵccf */]("ngbd-component-wrapper", component_wrapper_component["a" /* ComponentWrapper */], View_ComponentWrapper_Host_0, { component: "component" }, {}, ["ngbd-example-box", "ngbd-api-docs", "ngbd-api-docs-class", "ngbd-api-docs-config"]);\n\n//# sourceMappingURL=component-wrapper.component.ngfactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./demo/src/app/shared/component-wrapper/component-wrapper.component.ngfactory.js\n')},"./demo/src/app/shared/component-wrapper/component-wrapper.component.ts":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* unused harmony export DEFAULT_TAB */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ComponentWrapper; });\n\nvar DEFAULT_TAB = 'examples';\nvar VALID_TABS = [DEFAULT_TAB, 'api'];\nvar ComponentWrapper = /** @class */ (function () {\n    function ComponentWrapper(route, router) {\n        var _this = this;\n        this.route = route;\n        this.router = router;\n        this.fileTypes = [\n            ['T', 'HTML template file', 'btn-secondary'],\n            ['C', 'Component typescript file', 'btn-info'],\n        ];\n        this.route.params.subscribe(function (params) {\n            var tab = params['tab'];\n            if (VALID_TABS.indexOf(tab) !== -1) {\n                _this.activeTab = tab;\n            }\n            else {\n                _this.router.navigate(['..', DEFAULT_TAB], { relativeTo: _this.route });\n            }\n            document.body.scrollIntoView();\n        });\n    }\n    ComponentWrapper.prototype.tabChange = function (event) {\n        this.router.navigate(['..', event.nextId], { relativeTo: this.route });\n    };\n    return ComponentWrapper;\n}());\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3NyYy9hcHAvc2hhcmVkL2NvbXBvbmVudC13cmFwcGVyL2NvbXBvbmVudC13cmFwcGVyLmNvbXBvbmVudC50cz9iNjE1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ3VEO0FBRWhELElBQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQztBQUN0QyxJQUFNLFVBQVUsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUV4QztJQWdCRSwwQkFBb0IsS0FBcUIsRUFBVSxNQUFjO1FBQWpFLGlCQVVDO1FBVm1CLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUwxRCxjQUFTLEdBQUc7WUFDakIsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsZUFBZSxDQUFDO1lBQzVDLENBQUMsR0FBRyxFQUFFLDJCQUEyQixFQUFFLFVBQVUsQ0FBQztTQUMvQyxDQUFDO1FBR0EsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFNO1lBQ2hDLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkMsS0FBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7WUFDdkIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLEtBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxFQUFFLEVBQUMsVUFBVSxFQUFFLEtBQUksQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1lBQ3RFLENBQUM7WUFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELG9DQUFTLEdBQVQsVUFBVSxLQUFLO1FBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMiLCJmaWxlIjoiLi9kZW1vL3NyYy9hcHAvc2hhcmVkL2NvbXBvbmVudC13cmFwcGVyL2NvbXBvbmVudC13cmFwcGVyLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlLCBSb3V0ZXJ9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1RBQiA9ICdleGFtcGxlcyc7XG5jb25zdCBWQUxJRF9UQUJTID0gW0RFRkFVTFRfVEFCLCAnYXBpJ107XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nYmQtY29tcG9uZW50LXdyYXBwZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vY29tcG9uZW50LXdyYXBwZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIENvbXBvbmVudFdyYXBwZXIge1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBjb21wb25lbnQ6IHN0cmluZztcblxuICBwdWJsaWMgYWN0aXZlVGFiOiBzdHJpbmc7XG5cbiAgcHVibGljIGZpbGVUeXBlcyA9IFtcbiAgICBbJ1QnLCAnSFRNTCB0ZW1wbGF0ZSBmaWxlJywgJ2J0bi1zZWNvbmRhcnknXSxcbiAgICBbJ0MnLCAnQ29tcG9uZW50IHR5cGVzY3JpcHQgZmlsZScsICdidG4taW5mbyddLFxuICBdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLCBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7XG4gICAgdGhpcy5yb3V0ZS5wYXJhbXMuc3Vic2NyaWJlKHBhcmFtcyA9PiB7XG4gICAgICBjb25zdCB0YWIgPSBwYXJhbXNbJ3RhYiddO1xuICAgICAgaWYgKFZBTElEX1RBQlMuaW5kZXhPZih0YWIpICE9PSAtMSkge1xuICAgICAgICB0aGlzLmFjdGl2ZVRhYiA9IHRhYjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnLi4nLCBERUZBVUxUX1RBQl0sIHtyZWxhdGl2ZVRvOiB0aGlzLnJvdXRlfSk7XG4gICAgICB9XG4gICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbEludG9WaWV3KCk7XG4gICAgfSk7XG4gIH1cblxuICB0YWJDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy4uJywgZXZlbnQubmV4dElkXSwge3JlbGF0aXZlVG86IHRoaXMucm91dGV9KTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./demo/src/app/shared/component-wrapper/component-wrapper.component.ts\n")},"./src/tabset/tabset.ngfactory.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RenderType_NgbTabset; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return View_NgbTabset_0; });\n/* unused harmony export View_NgbTabset_Host_0 */\n/* unused harmony export NgbTabsetNgFactory */\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/@angular/core/fesm5/core.js");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/@angular/common/fesm5/common.js");\n/* harmony import */ var _tabset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/tabset/tabset.ts");\n/* harmony import */ var _tabset_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/tabset/tabset-config.ts");\n/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \n\n\n\n\nvar styles_NgbTabset = [];\nvar RenderType_NgbTabset = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵcrt */ "zb"]({ encapsulation: 2, styles: styles_NgbTabset, data: {} });\n\nfunction View_NgbTabset_2(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](0, null, null, 0))], null, null); }\nfunction View_NgbTabset_1(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 4, "li", [["class", "nav-item"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](1, 0, null, null, 3, "a", [["class", "nav-link"], ["href", ""], ["role", "tab"]], [[8, "id", 0], [2, "active", null], [2, "disabled", null], [1, "tabindex", 0], [1, "aria-controls", 0], [1, "aria-expanded", 0], [1, "aria-disabled", 0]], [[null, "click"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if (("click" === en)) {\n        var pd_0 = (!!_co.select(_v.context.$implicit.id) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵted */ "Tb"](2, null, [" ", ""])), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](16777216, null, null, 1, null, View_NgbTabset_2)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](4, 540672, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_1__[/* NgTemplateOutlet */ "p"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ViewContainerRef */ "ab"]], { ngTemplateOutlet: [0, "ngTemplateOutlet"] }, null)], function (_ck, _v) { var currVal_8 = ((_v.context.$implicit.titleTpl == null) ? null : _v.context.$implicit.titleTpl.templateRef); _ck(_v, 4, 0, currVal_8); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _v.context.$implicit.id; var currVal_1 = (_v.context.$implicit.id === _co.activeId); var currVal_2 = _v.context.$implicit.disabled; var currVal_3 = (_v.context.$implicit.disabled ? "-1" : undefined); var currVal_4 = ((!_co.destroyOnHide || (_v.context.$implicit.id === _co.activeId)) ? (_v.context.$implicit.id + "-panel") : null); var currVal_5 = (_v.context.$implicit.id === _co.activeId); var currVal_6 = _v.context.$implicit.disabled; _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6); var currVal_7 = _v.context.$implicit.title; _ck(_v, 2, 0, currVal_7); }); }\nfunction View_NgbTabset_5(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](0, null, null, 0))], null, null); }\nfunction View_NgbTabset_4(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 2, "div", [["role", "tabpanel"]], [[8, "className", 0], [1, "aria-labelledby", 0], [8, "id", 0], [1, "aria-expanded", 0]], null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](16777216, null, null, 1, null, View_NgbTabset_5)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](2, 540672, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_1__[/* NgTemplateOutlet */ "p"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ViewContainerRef */ "ab"]], { ngTemplateOutlet: [0, "ngTemplateOutlet"] }, null)], function (_ck, _v) { var currVal_4 = _v.parent.context.$implicit.contentTpl.templateRef; _ck(_v, 2, 0, currVal_4); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵinlineInterpolate */ "Db"](1, "tab-pane ", ((_v.parent.context.$implicit.id === _co.activeId) ? "active" : null), ""); var currVal_1 = _v.parent.context.$implicit.id; var currVal_2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵinlineInterpolate */ "Db"](1, "", _v.parent.context.$implicit.id, "-panel"); var currVal_3 = (_v.parent.context.$implicit.id === _co.activeId); _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3); }); }\nfunction View_NgbTabset_3(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](16777216, null, null, 1, null, View_NgbTabset_4)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](1, 16384, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_1__[/* NgIf */ "l"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ViewContainerRef */ "ab"], _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* TemplateRef */ "X"]], { ngIf: [0, "ngIf"] }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](0, null, null, 0))], function (_ck, _v) { var _co = _v.component; var currVal_0 = (!_co.destroyOnHide || (_v.context.$implicit.id === _co.activeId)); _ck(_v, 1, 0, currVal_0); }, null); }\nfunction View_NgbTabset_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 2, "ul", [["role", "tablist"]], [[8, "className", 0]], null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](16777216, null, null, 1, null, View_NgbTabset_1)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](2, 802816, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_1__[/* NgForOf */ "k"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ViewContainerRef */ "ab"], _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* TemplateRef */ "X"], _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* IterableDiffers */ "y"]], { ngForOf: [0, "ngForOf"] }, null), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](3, 0, null, null, 2, "div", [["class", "tab-content"]], null, null, null, null, null)), (_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵand */ "sb"](16777216, null, null, 1, null, View_NgbTabset_3)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](5, 802816, null, 0, _angular_common__WEBPACK_IMPORTED_MODULE_1__[/* NgForOf */ "k"], [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ViewContainerRef */ "ab"], _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* TemplateRef */ "X"], _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* IterableDiffers */ "y"]], { ngForOf: [0, "ngForOf"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_1 = _co.tabs; _ck(_v, 2, 0, currVal_1); var currVal_2 = _co.tabs; _ck(_v, 5, 0, currVal_2); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = (("nav nav-" + _co.type) + ((_co.orientation == "horizontal") ? (" " + _co.justifyClass) : " flex-column")); _ck(_v, 0, 0, currVal_0); }); }\nfunction View_NgbTabset_Host_0(_l) { return _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵvid */ "Vb"](0, [(_l()(), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵeld */ "Bb"](0, 0, null, null, 2, "ngb-tabset", [], null, null, null, View_NgbTabset_0, RenderType_NgbTabset)), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵdid */ "Ab"](1, 2146304, null, 1, _tabset__WEBPACK_IMPORTED_MODULE_2__[/* NgbTabset */ "d"], [_tabset_config__WEBPACK_IMPORTED_MODULE_3__[/* NgbTabsetConfig */ "a"]], null, null), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵqud */ "Rb"](603979776, 1, { tabs: 1 })], null, null); }\nvar NgbTabsetNgFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵccf */ "xb"]("ngb-tabset", _tabset__WEBPACK_IMPORTED_MODULE_2__[/* NgbTabset */ "d"], View_NgbTabset_Host_0, { activeId: "activeId", destroyOnHide: "destroyOnHide", justify: "justify", orientation: "orientation", type: "type" }, { tabChange: "tabChange" }, []);\n\n//# sourceMappingURL=tabset.ngfactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/tabset/tabset.ngfactory.js\n')}}]);