(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"./node_modules/@angular/http/fesm5/http.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return BrowserJsonp; });\n/* unused harmony export Éµangular_packages_http_http_f */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return _createDefaultCookieXSRFStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return httpFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return jsonpFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return BrowserXhr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return JSONPBackend; });\n/* unused harmony export JSONPConnection */\n/* unused harmony export CookieXSRFStrategy */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return XHRBackend; });\n/* unused harmony export XHRConnection */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BaseRequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return RequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return BaseResponseOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return ResponseOptions; });\n/* unused harmony export ReadyState */\n/* unused harmony export RequestMethod */\n/* unused harmony export ResponseContentType */\n/* unused harmony export ResponseType */\n/* unused harmony export Headers */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return Http; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return Jsonp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return HttpModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return JsonpModule; });\n/* unused harmony export Connection */\n/* unused harmony export ConnectionBackend */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return XSRFStrategy; });\n/* unused harmony export Request */\n/* unused harmony export Response */\n/* unused harmony export QueryEncoder */\n/* unused harmony export URLSearchParams */\n/* unused harmony export VERSION */\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/@angular/core/fesm5/core.js\");\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/rxjs/_esm5/index.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/rxjs/_esm5/internal/Observable.js\");\n/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./node_modules/@angular/platform-browser/fesm5/platform-browser.js\");\n/**\n * @license Angular v6.0.0\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n\n\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated use @angular/common/http instead\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n    BrowserXhr.decorators = [\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Injectable */ \"u\"] }\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Supported http methods.\n * @deprecated use @angular/common/http instead\n */\n/**\n * Supported http methods.\n * @deprecated use @angular/common/http instead\n */\nvar RequestMethod;\n/**\n * Supported http methods.\n * @deprecated use @angular/common/http instead\n */\n(function (RequestMethod) {\n    RequestMethod[RequestMethod[\"Get\"] = 0] = \"Get\";\n    RequestMethod[RequestMethod[\"Post\"] = 1] = \"Post\";\n    RequestMethod[RequestMethod[\"Put\"] = 2] = \"Put\";\n    RequestMethod[RequestMethod[\"Delete\"] = 3] = \"Delete\";\n    RequestMethod[RequestMethod[\"Options\"] = 4] = \"Options\";\n    RequestMethod[RequestMethod[\"Head\"] = 5] = \"Head\";\n    RequestMethod[RequestMethod[\"Patch\"] = 6] = \"Patch\";\n})(RequestMethod || (RequestMethod = {}));\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated use @angular/common/http instead\n */\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated use @angular/common/http instead\n */\nvar ReadyState;\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @deprecated use @angular/common/http instead\n */\n(function (ReadyState) {\n    ReadyState[ReadyState[\"Unsent\"] = 0] = \"Unsent\";\n    ReadyState[ReadyState[\"Open\"] = 1] = \"Open\";\n    ReadyState[ReadyState[\"HeadersReceived\"] = 2] = \"HeadersReceived\";\n    ReadyState[ReadyState[\"Loading\"] = 3] = \"Loading\";\n    ReadyState[ReadyState[\"Done\"] = 4] = \"Done\";\n    ReadyState[ReadyState[\"Cancelled\"] = 5] = \"Cancelled\";\n})(ReadyState || (ReadyState = {}));\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated use @angular/common/http instead\n */\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated use @angular/common/http instead\n */\nvar ResponseType;\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @deprecated use @angular/common/http instead\n */\n(function (ResponseType) {\n    ResponseType[ResponseType[\"Basic\"] = 0] = \"Basic\";\n    ResponseType[ResponseType[\"Cors\"] = 1] = \"Cors\";\n    ResponseType[ResponseType[\"Default\"] = 2] = \"Default\";\n    ResponseType[ResponseType[\"Error\"] = 3] = \"Error\";\n    ResponseType[ResponseType[\"Opaque\"] = 4] = \"Opaque\";\n})(ResponseType || (ResponseType = {}));\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated use @angular/common/http instead\n */\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated use @angular/common/http instead\n */\nvar ContentType;\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @deprecated use @angular/common/http instead\n */\n(function (ContentType) {\n    ContentType[ContentType[\"NONE\"] = 0] = \"NONE\";\n    ContentType[ContentType[\"JSON\"] = 1] = \"JSON\";\n    ContentType[ContentType[\"FORM\"] = 2] = \"FORM\";\n    ContentType[ContentType[\"FORM_DATA\"] = 3] = \"FORM_DATA\";\n    ContentType[ContentType[\"TEXT\"] = 4] = \"TEXT\";\n    ContentType[ContentType[\"BLOB\"] = 5] = \"BLOB\";\n    ContentType[ContentType[\"ARRAY_BUFFER\"] = 6] = \"ARRAY_BUFFER\";\n})(ContentType || (ContentType = {}));\n/**\n * Define which buffer to use to store the response\n * @deprecated use @angular/common/http instead\n */\n/**\n * Define which buffer to use to store the response\n * @deprecated use @angular/common/http instead\n */\nvar ResponseContentType;\n/**\n * Define which buffer to use to store the response\n * @deprecated use @angular/common/http instead\n */\n(function (ResponseContentType) {\n    ResponseContentType[ResponseContentType[\"Text\"] = 0] = \"Text\";\n    ResponseContentType[ResponseContentType[\"Json\"] = 1] = \"Json\";\n    ResponseContentType[ResponseContentType[\"ArrayBuffer\"] = 2] = \"ArrayBuffer\";\n    ResponseContentType[ResponseContentType[\"Blob\"] = 3] = \"Blob\";\n})(ResponseContentType || (ResponseContentType = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar Headers = /** @class */ (function () {\n    // TODO(vicb): any -> string|string[]\n    function Headers(headers) {\n        var _this = this;\n        /** @internal header names are lower case */\n        this._headers = new Map();\n        /** @internal map lower case names to actual names */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     */\n    /**\n       * Returns a new Headers instance from the given DOMString of Response Headers\n       */\n    Headers.fromResponseHeaderString = /**\n       * Returns a new Headers instance from the given DOMString of Response Headers\n       */\n    function (headersString) {\n        var headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var index = line.indexOf(':');\n            if (index > 0) {\n                var name_1 = line.slice(0, index);\n                var value = line.slice(index + 1).trim();\n                headers.set(name_1, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     */\n    /**\n       * Appends a header to existing list of header values for a given header name.\n       */\n    Headers.prototype.append = /**\n       * Appends a header to existing list of header values for a given header name.\n       */\n    function (name, value) {\n        var values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     */\n    /**\n       * Deletes all header values for the given name.\n       */\n    Headers.prototype.delete = /**\n       * Deletes all header values for the given name.\n       */\n    function (name) {\n        var lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    Headers.prototype.forEach = function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n       * Returns first header that matches given name.\n       */\n    Headers.prototype.get = /**\n       * Returns first header that matches given name.\n       */\n    function (name) {\n        var values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n       * Checks for existence of header by given name.\n       */\n    Headers.prototype.has = /**\n       * Checks for existence of header by given name.\n       */\n    function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n       * Returns the names of the headers\n       */\n    Headers.prototype.keys = /**\n       * Returns the names of the headers\n       */\n    function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     */\n    /**\n       * Sets or overrides header value for given name.\n       */\n    Headers.prototype.set = /**\n       * Sets or overrides header value for given name.\n       */\n    function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     */\n    /**\n       * Returns values of all headers.\n       */\n    Headers.prototype.values = /**\n       * Returns values of all headers.\n       */\n    function () { return Array.from(this._headers.values()); };\n    /**\n     * Returns string of all headers.\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    /**\n       * Returns string of all headers.\n       */\n    // TODO(vicb): returns {[name: string]: string[]}\n    Headers.prototype.toJSON = /**\n       * Returns string of all headers.\n       */\n    // TODO(vicb): returns {[name: string]: string[]}\n    function () {\n        var _this = this;\n        var serialized = {};\n        this._headers.forEach(function (values, name) {\n            var split = [];\n            values.forEach(function (v) { return split.push.apply(split, Object(tslib__WEBPACK_IMPORTED_MODULE_1__[/* __spread */ \"d\"])(v.split(','))); });\n            serialized[_this._normalizedNames.get(name)] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n       * Returns list of header values for a given name.\n       */\n    Headers.prototype.getAll = /**\n       * Returns list of header values for a given name.\n       */\n    function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     */\n    /**\n       * This method is not implemented.\n       */\n    Headers.prototype.entries = /**\n       * This method is not implemented.\n       */\n    function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    Headers.prototype.mayBeSetNormalizedName = function (name) {\n        var lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {@link Response Responses} for\n * mock responses (see {@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar ResponseOptions = /** @class */ (function () {\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     */\n    /**\n       * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n       * override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * This may be useful when sharing a base `ResponseOptions` object inside tests,\n       * where certain properties may change from test to test.\n       *\n       * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n       *\n       * ```typescript\n       * import {ResponseOptions, Response} from '@angular/http';\n       *\n       * var options = new ResponseOptions({\n       *   body: {name: 'Jeff'}\n       * });\n       * var res = new Response(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('options.url:', options.url); // null\n       * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n       * console.log('res.url:', res.url); // https://google.com\n       * ```\n       */\n    ResponseOptions.prototype.merge = /**\n       * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n       * override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * This may be useful when sharing a base `ResponseOptions` object inside tests,\n       * where certain properties may change from test to test.\n       *\n       * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n       *\n       * ```typescript\n       * import {ResponseOptions, Response} from '@angular/http';\n       *\n       * var options = new ResponseOptions({\n       *   body: {name: 'Jeff'}\n       * });\n       * var res = new Response(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('options.url:', options.url); // null\n       * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n       * console.log('res.url:', res.url); // https://google.com\n       * ```\n       */\n    function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link ResponseOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create {@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar BaseResponseOptions = /** @class */ (function (_super) {\n    Object(tslib__WEBPACK_IMPORTED_MODULE_1__[/* __extends */ \"b\"])(BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    BaseResponseOptions.decorators = [\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Injectable */ \"u\"] }\n    ];\n    /** @nocollapse */\n    BaseResponseOptions.ctorParameters = function () { return []; };\n    return BaseResponseOptions;\n}(ResponseOptions));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {@link Request}.\n *\n * @deprecated use @angular/common/http instead\n */\nvar ConnectionBackend = /** @class */ (function () {\n    function ConnectionBackend() {\n    }\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated use @angular/common/http instead\n */\nvar Connection = /** @class */ (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated use @angular/common/http instead\n */\nvar XSRFStrategy = /** @class */ (function () {\n    function XSRFStrategy() {\n    }\n    return XSRFStrategy;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n\nfunction stringToArrayBuffer(input) {\n    var view = new Uint16Array(input.length);\n    for (var i = 0, strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var map = new Map();\n    if (rawParams.length > 0) {\n        var params = rawParams.split('&');\n        params.forEach(function (param) {\n            var eqIdx = param.indexOf('=');\n            var _a = Object(tslib__WEBPACK_IMPORTED_MODULE_1__[/* __read */ \"c\"])(eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], 2), key = _a[0], val = _a[1];\n            var list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated use @angular/common/http instead\n **/\nvar QueryEncoder = /** @class */ (function () {\n    function QueryEncoder() {\n    }\n    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated use @angular/common/http instead\n */\nvar URLSearchParams = /** @class */ (function () {\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    URLSearchParams.prototype.clone = function () {\n        var clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n    URLSearchParams.prototype.get = function (param) {\n        var storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n    URLSearchParams.prototype.set = function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    URLSearchParams.prototype.setAll = \n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    URLSearchParams.prototype.append = function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    URLSearchParams.prototype.appendAll = \n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var list = _this.paramsMap.get(param) || [];\n            for (var i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    URLSearchParams.prototype.replaceAll = \n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    URLSearchParams.prototype.toString = function () {\n        var _this = this;\n        var paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) {\n                return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));\n            });\n        });\n        return paramsList.join('&');\n    };\n    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {@link Request} and {@link Response}\n * https://fetch.spec.whatwg.org/#body\n */\nvar Body = /** @class */ (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     */\n    /**\n       * Attempts to return body as parsed `JSON` object, or raises an exception.\n       */\n    Body.prototype.json = /**\n       * Attempts to return body as parsed `JSON` object, or raises an exception.\n       */\n    function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     */\n    /**\n       * Returns the body as a string, presuming `toString()` can be called on the response body.\n       *\n       * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n       * bytes in the buffer will be interpreted. Valid values are:\n       *\n       * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n       *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n       *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n       *   into consideration. This is the default behavior to avoid breaking apps, but should be\n       *   considered deprecated.\n       *\n       * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n       */\n    Body.prototype.text = /**\n       * Returns the body as a string, presuming `toString()` can be called on the response body.\n       *\n       * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n       * bytes in the buffer will be interpreted. Valid values are:\n       *\n       * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n       *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n       *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n       *   into consideration. This is the default behavior to avoid breaking apps, but should be\n       *   considered deprecated.\n       *\n       * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n       */\n    function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(this._body));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(this._body));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     */\n    /**\n       * Return the body as an ArrayBuffer\n       */\n    Body.prototype.arrayBuffer = /**\n       * Return the body as an ArrayBuffer\n       */\n    function () {\n        if (this._body instanceof ArrayBuffer) {\n            return this._body;\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n      * Returns the request's body as a Blob, assuming that body exists.\n      */\n    /**\n        * Returns the request's body as a Blob, assuming that body exists.\n        */\n    Body.prototype.blob = /**\n        * Returns the request's body as a Blob, assuming that body exists.\n        */\n    function () {\n        if (this._body instanceof Blob) {\n            return this._body;\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated use @angular/common/http instead\n */\nvar Response = /** @class */ (function (_super) {\n    Object(tslib__WEBPACK_IMPORTED_MODULE_1__[/* __extends */ \"b\"])(Response, _super);\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = (responseOptions.status);\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = (responseOptions.type);\n        _this.url = (responseOptions.url);\n        return _this;\n    }\n    Response.prototype.toString = function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\nfunction _getJsonpConnections() {\n    var w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\n// Make sure not to evaluate this in a non-browser environment!\nvar BrowserJsonp = /** @class */ (function () {\n    function BrowserJsonp() {\n    }\n    // Construct a <script> element with the specified URL\n    // Construct a <script> element with the specified URL\n    BrowserJsonp.prototype.build = \n    // Construct a <script> element with the specified URL\n    function (url) {\n        var node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n        var connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    BrowserJsonp.prototype.removeConnection = function (id) {\n        var connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    // Attach the <script> element to the DOM\n    // Attach the <script> element to the DOM\n    BrowserJsonp.prototype.send = \n    // Attach the <script> element to the DOM\n    function (node) { document.body.appendChild((node)); };\n    // Remove <script> element from the DOM\n    // Remove <script> element from the DOM\n    BrowserJsonp.prototype.cleanup = \n    // Remove <script> element from the DOM\n    function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild((node));\n        }\n    };\n    BrowserJsonp.decorators = [\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Injectable */ \"u\"] }\n    ];\n    /** @nocollapse */\n    BrowserJsonp.ctorParameters = function () { return []; };\n    return BrowserJsonp;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated use @angular/common/http instead\n */\nvar JSONPConnection = /** @class */ (function () {\n    /** @internal */\n    function JSONPConnection(req, _dom, baseResponseOptions) {\n        var _this = this;\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new rxjs__WEBPACK_IMPORTED_MODULE_3__[/* Observable */ \"a\"](function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var callback = _dom.requestCallback(_this._id);\n            var url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var script = _this._script = _dom.build(url);\n            var onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     */\n    /**\n       * Callback called when the JSONP request completes, to notify the application\n       * of the new data.\n       */\n    JSONPConnection.prototype.finished = /**\n       * Callback called when the JSONP request completes, to notify the application\n       * of the new data.\n       */\n    function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection;\n}());\n/**\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated use @angular/common/http instead\n */\nvar JSONPBackend = /** @class */ (function (_super) {\n    Object(tslib__WEBPACK_IMPORTED_MODULE_1__[/* __extends */ \"b\"])(JSONPBackend, _super);\n    /** @internal */\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    JSONPBackend.prototype.createConnection = function (request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    JSONPBackend.decorators = [\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Injectable */ \"u\"] }\n    ];\n    /** @nocollapse */\n    JSONPBackend.ctorParameters = function () { return [\n        { type: BrowserJsonp, },\n        { type: ResponseOptions, },\n    ]; };\n    return JSONPBackend;\n}(ConnectionBackend));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @deprecated use @angular/common/http instead\n */\nvar XHRConnection = /** @class */ (function () {\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new rxjs__WEBPACK_IMPORTED_MODULE_3__[/* Observable */ \"a\"](function (responseObserver) {\n            var _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var url = getResponseURL(_xhr) || req.url;\n                var statusText = _xhr.statusText || 'OK';\n                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var onError = function (err) {\n                var responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader((name), values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated use @angular/common/http instead\n */\nvar CookieXSRFStrategy = /** @class */ (function () {\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\n        var xsrfToken = Object(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_4__[/* ÉµgetDOM */ \"t\"])().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n * @Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated use @angular/common/http instead\n */\nvar XHRBackend = /** @class */ (function () {\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    XHRBackend.prototype.createConnection = function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    XHRBackend.decorators = [\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Injectable */ \"u\"] }\n    ];\n    /** @nocollapse */\n    XHRBackend.ctorParameters = function () { return [\n        { type: BrowserXhr, },\n        { type: ResponseOptions, },\n        { type: XSRFStrategy, },\n    ]; };\n    return XHRBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar RequestOptions = /** @class */ (function () {\n    // TODO(Dzmitry): remove search when this.search is removed\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        get: /**\n           * @deprecated from 4.0.0. Use params instead.\n           */\n        function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        set: /**\n           * @deprecated from 4.0.0. Use params instead.\n           */\n        function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     */\n    /**\n       * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * Note that `headers` and `search` will override existing values completely if present in\n       * the `options` object. If these values should be merged, it should be done prior to calling\n       * `merge` on the `RequestOptions` instance.\n       *\n       * ```typescript\n       * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n       *\n       * const options = new RequestOptions({\n       *   method: RequestMethod.Post\n       * });\n       * const req = new Request(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('req.method:', RequestMethod[req.method]); // Post\n       * console.log('options.url:', options.url); // null\n       * console.log('req.url:', req.url); // https://google.com\n       * ```\n       */\n    RequestOptions.prototype.merge = /**\n       * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n       * existing values. This method will not change the values of the instance on which it is being\n       * called.\n       *\n       * Note that `headers` and `search` will override existing values completely if present in\n       * the `options` object. If these values should be merged, it should be done prior to calling\n       * `merge` on the `RequestOptions` instance.\n       *\n       * ```typescript\n       * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n       *\n       * const options = new RequestOptions({\n       *   method: RequestMethod.Post\n       * });\n       * const req = new Request(options.merge({\n       *   url: 'https://google.com'\n       * }));\n       * console.log('req.method:', RequestMethod[req.method]); // Post\n       * console.log('options.url:', options.url); // null\n       * console.log('req.url:', req.url); // https://google.com\n       * ```\n       */\n    function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    RequestOptions.prototype._mergeSearchParams = function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    RequestOptions.prototype._parseParams = function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    RequestOptions.prototype._appendParam = function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {@link RequestMethod RequestMethod.Get}\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link RequestOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create and send {@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar BaseRequestOptions = /** @class */ (function (_super) {\n    Object(tslib__WEBPACK_IMPORTED_MODULE_1__[/* __extends */ \"b\"])(BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    BaseRequestOptions.decorators = [\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Injectable */ \"u\"] }\n    ];\n    /** @nocollapse */\n    BaseRequestOptions.ctorParameters = function () { return []; };\n    return BaseRequestOptions;\n}(RequestOptions));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar Request = /** @class */ (function (_super) {\n    Object(tslib__WEBPACK_IMPORTED_MODULE_1__[/* __extends */ \"b\"])(Request, _super);\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var url = requestOptions.url;\n        _this.url = (requestOptions.url);\n        var paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName((requestOptions.method));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = (requestOptions.withCredentials);\n        _this.responseType = (requestOptions.responseType);\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     */\n    /**\n       * Returns the content type enum based on header options.\n       */\n    Request.prototype.detectContentType = /**\n       * Returns the content type enum based on header options.\n       */\n    function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     */\n    /**\n       * Returns the content type of request's body based on its type.\n       */\n    Request.prototype.detectContentTypeFromBody = /**\n       * Returns the content type of request's body based on its type.\n       */\n    function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     */\n    /**\n       * Returns the request's body according to its type. If body is undefined, return\n       * null.\n       */\n    Request.prototype.getBody = /**\n       * Returns the request's body according to its type. If body is undefined, return\n       * null.\n       */\n    function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\nfunction urlEncodeParams(params) {\n    var searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = w /** TODO #9100 */['FormData'] || noop;\nvar Blob$1 = w /** TODO #9100 */['Blob'] || noop;\nvar ArrayBuffer$1 = w /** TODO #9100 */['ArrayBuffer'] || noop;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        }));\n    }\n    return newOptions.merge(new RequestOptions({ method: method, url: url }));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * @Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated use @angular/common/http instead\n */\nvar Http = /** @class */ (function () {\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     */\n    /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       */\n    Http.prototype.request = /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       */\n    function (url, options) {\n        var responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     */\n    /**\n       * Performs a request with `get` http method.\n       */\n    Http.prototype.get = /**\n       * Performs a request with `get` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     */\n    /**\n       * Performs a request with `post` http method.\n       */\n    Http.prototype.post = /**\n       * Performs a request with `post` http method.\n       */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     */\n    /**\n       * Performs a request with `put` http method.\n       */\n    Http.prototype.put = /**\n       * Performs a request with `put` http method.\n       */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     */\n    /**\n       * Performs a request with `delete` http method.\n       */\n    Http.prototype.delete = /**\n       * Performs a request with `delete` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     */\n    /**\n       * Performs a request with `patch` http method.\n       */\n    Http.prototype.patch = /**\n       * Performs a request with `patch` http method.\n       */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     */\n    /**\n       * Performs a request with `head` http method.\n       */\n    Http.prototype.head = /**\n       * Performs a request with `head` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     */\n    /**\n       * Performs a request with `options` http method.\n       */\n    Http.prototype.options = /**\n       * Performs a request with `options` http method.\n       */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    Http.decorators = [\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Injectable */ \"u\"] }\n    ];\n    /** @nocollapse */\n    Http.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Http;\n}());\n/**\n * @deprecated use @angular/common/http instead\n */\nvar Jsonp = /** @class */ (function (_super) {\n    Object(tslib__WEBPACK_IMPORTED_MODULE_1__[/* __extends */ \"b\"])(Jsonp, _super);\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     *\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     */\n    /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       *\n       * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n       * supported by all current browsers. Because JSONP creates a `<script>` element with\n       * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n       * source could expose your application to XSS risks. Data exposed by JSONP may also be\n       * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n       * future security issues (e.g. content sniffing).  For more detail, see the\n       * [Security Guide](http://g.co/ng/security).\n       */\n    Jsonp.prototype.request = /**\n       * Performs any type of http request. First argument is required, and can either be a url or\n       * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n       * object can be provided as the 2nd argument. The options object will be merged with the values\n       * of {@link BaseRequestOptions} before performing the request.\n       *\n       * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n       * supported by all current browsers. Because JSONP creates a `<script>` element with\n       * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n       * source could expose your application to XSS risks. Data exposed by JSONP may also be\n       * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n       * future security issues (e.g. content sniffing).  For more detail, see the\n       * [Security Guide](http://g.co/ng/security).\n       */\n    function (url, options) {\n        var responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    Jsonp.decorators = [\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Injectable */ \"u\"] }\n    ];\n    /** @nocollapse */\n    Jsonp.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Jsonp;\n}(Http));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated use @angular/common/http instead\n */\nvar HttpModule = /** @class */ (function () {\n    function HttpModule() {\n    }\n    HttpModule.decorators = [\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* NgModule */ \"B\"], args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                        BrowserXhr,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        XHRBackend,\n                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                    ],\n                },] }\n    ];\n    /** @nocollapse */\n    HttpModule.ctorParameters = function () { return []; };\n    return HttpModule;\n}());\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated use @angular/common/http instead\n */\nvar JsonpModule = /** @class */ (function () {\n    function JsonpModule() {\n    }\n    JsonpModule.decorators = [\n        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* NgModule */ \"B\"], args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                        BrowserJsonp,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        JSONPBackend,\n                    ],\n                },] }\n    ];\n    /** @nocollapse */\n    JsonpModule.ctorParameters = function () { return []; };\n    return JsonpModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated use @angular/common/http instead\n */\nvar VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Version */ \"Z\"]('6.0.0');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@angular/http/fesm5/http.js\n")}}]);